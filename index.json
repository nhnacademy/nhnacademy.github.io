[{"authors":null,"categories":null,"content":"경남 캠퍼스\n hello@nhnacademy.com, 055-724-2031~2 50948 경상남도 김해시 내외 중앙로 55, 정우빌딩 5층  광주 캠퍼스\n 조선대학교 IT융합대학 E-SPACE  ","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1655075885,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://nhnacademy.github.io/author/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/","section":"authors","summary":"경남 캠퍼스 hello@nhnacademy.com, 055-724-2031~2 50948 경상남도 김해시 내외 중앙로 55, 정우빌딩 5층 광주 캠","tags":null,"title":"","type":"authors"},{"authors":null,"categories":null,"content":" 전산학을 모르는 이에게 알맞습니다. 전산학 기초를 점검하는 이에게 도움이 될 수도 있습니다. 프로그램 짜는 재미와 데이터 읽는 기쁨을 누리는 시간이 되기를 바랍니다.   시작   ","date":1645056e3,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1655268184,"objectID":"6dfe8a130734895857399f706cc8af90","permalink":"https://nhnacademy.github.io/archive/cs/","publishdate":"2022-02-17T00:00:00Z","relpermalink":"/archive/cs/","section":"archive","summary":"전산학 기초를 다지는 데 도움이 되는 자료를 쌓아 둡니다.","tags":null,"title":"전산학 기초","type":"book"},{"authors":null,"categories":null,"content":" Java 프로그래밍 언어의 기초를 점검합니다. 처음 배우는 이에게 알맞습니다.  프로그래밍 환경  IntelliJ  NHN 개발자들이 쓰는 환경입니다.   Visual Studio Code + Java Jupyter Notebook + Java (Visual Studio Code + Jupyter Notebook) + Java  가끔씩 Quiz를 만드는 데 쓰고 있습니다.     시작   ","date":1648166400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1655268184,"objectID":"70f362127cee93696b6751bd754d3639","permalink":"https://nhnacademy.github.io/archive/java/","publishdate":"2022-03-25T00:00:00Z","relpermalink":"/archive/java/","section":"archive","summary":"Java 프로그래밍 언어의 기초를 점검합니다.","tags":null,"title":"Java","type":"book"},{"authors":null,"categories":null,"content":" 프로그램을 짜는 환경으로서 리눅스 기초를 점검합니다. 리눅스에서 프로그램을 처음 짜보는 이에게 알맞습니다.  프로그래밍 환경  Linux + VS Code  Windows에서는 WSL + Linux ShellCheck은 필수   (VS Code + Jupyter Notebook) + bash kernel  가끔씩 linux 문제를 만드는 데 쓰고 있습니다. 노트북의 shell script 블록(cell)은 subshell 속에서 돕니다. 이때 .bashrc를 읽어 들입니다. 쉘 스크립트가 돌아가는 환경을 손보고 싶으면 .bashrc를 고쳐 써야 합니다.    # 이를테면, 아래 코드를 .bashrc에 보태면 ${HOME}/.local/shell/bin을 PATH에 걸 수 있습니다. if [[ ! \u0026quot;$PATH\u0026quot; == *${HOME}/.local/shell/bin* ]]; then export PATH=${HOME}/.local/shell/bin:$PATH fi   시작   ","date":1648166400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1655268184,"objectID":"bc045d717c97ac70906db97e9cbc20cd","permalink":"https://nhnacademy.github.io/archive/linux/","publishdate":"2022-03-25T00:00:00Z","relpermalink":"/archive/linux/","section":"archive","summary":"Linux 프로그래밍 환경","tags":null,"title":"Linux","type":"book"},{"authors":null,"categories":null,"content":" 1999 년경부터 TIP 방식으로 공부할 수 있도록 만들어 두었던 자료들입니다. 전산학 기초를 다지는 데 도움이 되도록 모두에게 창고를 열어둡니다. 창고 자료를 두고 얘기를 나누고 싶다면 여기로 오세요.    NHN 아카데미는 TIP 방식으로 교육/연수/훈련하지 않습니다. 창고에 쌓인 자료는 NHN 아카데미 교육 과정과는 아무런 관계가 없습니다. 어떤 NHN 아카데미 교육 과정의 평가나 연수에도 쓰지 않습니다.    ","date":1648166400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1655285110,"objectID":"eeb5e5334776aa6e05c4c0a91d9acdea","permalink":"https://nhnacademy.github.io/archive/","publishdate":"2022-03-25T00:00:00Z","relpermalink":"/archive/","section":"archive","summary":"TIP Archive","tags":null,"title":"창고","type":"book"},{"authors":null,"categories":null,"content":"%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fff', 'fontFamily': '$sta-font-heading, sans-serif' }}}%% flowchart LR nhntrack([전산학 기초]) -.-\u0026gt; pre nhntrack -.-\u0026gt; |\\n 선발 시험| tool([도구 + 기술]) subgraph \u0026quot;연수 과정\u0026quot; pre([선발 과정]) --\u0026gt; tool([도구 + 기술]) tool([도구 + 기술]) --\u0026gt; |\\n 평가| project([프로젝트]) end classDef nodestyle fill:#FFF, stroke:darkgrey, stroke-width:0.5px; class tip nodestyle; class project nodestyle; class tool nodestyle;  ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1655261764,"objectID":"a98a8836220067f37599a398a7c77b75","permalink":"https://nhnacademy.github.io/courses/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/","section":"courses","summary":"%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fff', 'fontFamily': '$sta-font-heading, sans-serif' }}}%% flowchart LR nhntrack([전산학 기초])","tags":null,"title":"과정","type":"book"},{"authors":null,"categories":null,"content":"몬테카를로 방법 스트림 패러다임  경남 캠퍼스 1기 웹 서비스 연수 과정 시작 전 방학 숙제로 냈던 문제입니다. 기술 면접과 코딩 테스트에 나왔던 문제의 답도 엿볼 수 있도록 꾸몄습니다. 글을 읽고 프로그램이 잘 돌아가도록 코드 속의 \u0026hellip;을 채우세요.   Python 판   ","date":1645056e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"239ac87fc1edabdc6b046a3938e6ca01","permalink":"https://nhnacademy.github.io/archive/cs/001/","publishdate":"2022-02-17T00:00:00Z","relpermalink":"/archive/cs/001/","section":"archive","summary":"스트림 패러다임으로 꾸민 몬테카를로 방법과 응용","tags":null,"title":"1","type":"book"},{"authors":null,"categories":null,"content":"#!/usr/bin/env sh echo hi silence command -v silence \u0026amp;\u0026amp; echo ok silence silence ! command -v silence \u0026amp;\u0026amp; echo ok echo bye  hi ok bye  silence shell script를 짭니다.\n도움말 귀띔  Silencing the Output of a Bash Command shell 스크립트를 짜다 보면 어떤 명령이 잘 돌아갔는지 아니면 문제가 생겼는지 exit status만 알면 되고 stdout, stderr 스트림으로 나오는 메시지를 숨기고 싶을 때가 있습니다. linux (Unix)의 file descriptor와 stdin, stdout, stderr 같은 기본 스트림의 역할, /dev/null의 쓰임새, shell 언어의 redirection 연산을 알아야 풀 수 있는 문제입니다. jupyter notebook을 쓰는 경우에는, bash 코드 셀이 돌아가는 subshell 환경에 silence 스크립트가 들어있는 폴더가 PATH에 걸려 있도록 설정합니다.   공부 거리  Files and streams, Bourne Shell Scripting, Wikibooks David Both, Working with data streams on the Linux command line, opensource.com   ","date":1587513600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"706e898d964274f7bc630c1ac6c80756","permalink":"https://nhnacademy.github.io/archive/linux/001/","publishdate":"2020-04-22T00:00:00Z","relpermalink":"/archive/linux/001/","section":"archive","summary":"#!/usr/bin/env sh echo hi silence command -v silence \u0026amp;\u0026amp; echo ok silence silence ! command -v silence \u0026amp;\u0026amp; echo ok echo bye hi ok bye silence shell scr","tags":null,"title":"1","type":"book"},{"authors":null,"categories":null,"content":"Java에서는 call-by-value로 인자 값을 주고 받습니다.\nclass 물체 { private int n = 0; public 물체( int m ) { n = m; } public void modify( int m ) { n = m; } public String toString() { return \u0026quot;\u0026quot; + n; } } class ParameterPassing { public static void callByValue( int 복사본 ) { 복사본 = 0; } public static void callByValue( 물체 copy ) { copy.modify( 0 ); } public static void test() { int 원본 = 1; System.out.println( 원본 ); callByValue( 원본 ); System.out.println( 원본 ); 물체 source = new 물체( 1 ); System.out.println( source ); callByValue( source ); System.out.println( source ); } } ParameterPassing.test(); // Jupyter notebook에서만  1 1 1 0   원본은 바뀌지 않지만, source는 변했습니다. Call-by-value인데도 source가 변한 까닭은 무엇인가요? 위의 실험 결과로 볼 때 Java는 call-by-reference를 지원한다고 볼 수 있나요?  도움말 Jupyter notebook Java 커널이 깔린 Jupyter notebook이 아니라면 test()를 곧바로 돌릴 수 없습니다.\n 귀띔 Java 언어에서 value semantics와 reference (pointer) semantics의 차이를 코드로 시연하면서 설명할 수 있는지 되새겨보는 문제입니다.\n ","date":11772e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"56c86d8f5e53eb562b6913c56d366ee3","permalink":"https://nhnacademy.github.io/archive/java/001/","publishdate":"2007-04-22T00:00:00Z","relpermalink":"/archive/java/001/","section":"archive","summary":"Java에서는 call-by-value로 인자 값을 주고 받습니","tags":null,"title":"1","type":"book"},{"authors":null,"categories":null,"content":"$$ g(f(1, f(2, f(3, t)))) = 1, t \\in T \\tag{1} $$ $$ g(f(1, f(2, f(3, t)))) = 3, t \\in T \\tag{2} $$ $$ f(f(f(t, i, 1), i, 2), i, 3) = f(t,i,3), $$ $$ g(f(f(f(t, i, 1), j, 2), k, 3), i) = 1, t \\in T \\tag{3} $$\n (1), (2), (3)에서 T는 제 각기 어떤 데이터 타입인가요? (1), (2), (3)에서 함수 g와 f는 T의 어떤 연산에 대응하나요?  도움말 귀띔  데이터에 속하는 값과 연산의 의미를 기술하여 데이터 타입을 정의하는 방식을 두고 Abstract Data Type(ADT)이라고도 합니다. 컴퓨터 계산의 복잡도(computational complexity)를 헤아려 자료 구조(data structure)와 알고리즘을 선별하는 공부와 함께, ADT 방식으로 자료 구조(data structure)의 의미를 기술하고 이해하는 연습을 하다 보면, 문제 풀이 방식에 알맞은 연산을 간추릴 수 있고, 이렇게 간추려낸 연산이 필요한 자료 구조를 정의한다는 점도 알게 됩니다. 소프트웨어 부품의 인터페이스를 설계하는 능력을 기르는데 도움이 되는 공부이기 때문에 (자료 구조를 어떻게 만드는지는 일부러 무시하고) 주요 연산(함수)만 엮어서 테이터 타입을 어떻게 특정할 수 있는지를 맛 보이려고 만든 단편적인 문제입니다. 데이터 타입의 의미(semantics)를 기술하는 데에도 여러 가지 방법 있습니다. ADT 방식에 따라 데이터 타입의 정의를 기술하는 데는 더 많은 공부와 연습이 필요합니다.   참고 자료  Barbara Liskov, Stephen Zilles, Programming with abstract data types, ACM SIGPLAN Notices, Volume 9, Issue 4, April 1974, pp 50~59, https://doi.org/10.1145/942572.807045 Luca Cardeli, Peter Wegner, \u0026ldquo;On Understanding Types, Data Abstraction, and Polymorphism\u0026rdquo;, Computing Surveys, Vol 17 n. 4, pp 471-522, December 1985   ","date":1639958400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"36e5625ab38dea7d4b084a148d098748","permalink":"https://nhnacademy.github.io/archive/cs/002/","publishdate":"2021-12-20T00:00:00Z","relpermalink":"/archive/cs/002/","section":"archive","summary":"$$ g(f(1, f(2, f(3, t)))) = 1, t \\in T \\tag{1} $$ $$ g(f(1, f(2, f(3, t)))) = 3, t \\in T \\tag{2} $$ $$ f(f(f(t, i, 1), i, 2),","tags":null,"title":"2","type":"book"},{"authors":null,"categories":null,"content":"HashSet으로 1들의 집합을 만듭니다.\nimport java.util.*; class Sameness { public static void 집합크기(Set 집합, Object[] elements) { Collections.addAll( 집합, elements ) ; System.out.println( 집합.toString() + \u0026quot;의 원소 수는 \u0026quot; + 집합.size() ); } static Integer one = new Integer(1); static Object ones[] = { 1, 1.0, one, one.intValue(), one.shortValue() , one.longValue(), one.floatValue(), one.doubleValue() , new Long(1), new Float(1), new Double(1) }; } Sameness.집합크기( new HashSet(), Sameness.ones ); // Jupyter Notebook에서만  [1.0, 1.0, 1, 1, 1]의 원소 수는 5   집합의 크기(원소의 개수)가 왜 5일까요?  분수(유리수)를 정의합니다.\nclass 분수 { public 분수(int numerator, int denominator) throws ArithmeticException { if ( 0 == denominator ) throw new ArithmeticException( \u0026quot;분모 0\u0026quot; ); 분자 = numerator; 분모 = denominator; if (denominator \u0026lt; 0) { 분자 = - numerator; 분모 = - denominator; } 약분(); } public int getDenominator() { return 분모; } public int getNumerator() { return 분자; } public String toString() { return String.valueOf( 분자 ) + '/' + String.valueOf( 분모 ); } private void 약분() { int g = 최대공약수( Math.abs(분자), Math.abs(분모) ); { 분자 = 분자 / g; 분모 = 분모 / g; } } private static int 최대공약수(int x, int y) { return 0 == y ? x : 최대공약수(y, x % y); } private int 분모, 분자; }  이제 분수 집합도 만들 수 있습니다.\nclass Two { static 분수 twos[] = { new 분수( 2, 1 ), new 분수( 4, 2 ), new 분수( -2, -1 ) }; } Sameness.집합크기( new HashSet(), Two.twos ); // in Jupiter Notebook  [2/1, 2/1, 2/1]의 원소 수는 3  집합의 원소 수가 3개입니다. 틀린 답이 나오는 이유를 설명하고 정답이 나오도록 만들어 보세요. HashSet 대신에 TreeSet을 써서 같은 실험을 해보세요.  도움말 귀띔 두 데이터가 같다는 것은 무슨 뜻일까요? 프로그래밍 언어에서 value equality와 reference (pointer) equality를 차이를 이해하고, 이어서 새로운 데이터를 만들 때 그 데이터 타입에 속하는 원소(또는 인스턴스) 사이의 같거나 다름을 어떻게 이해하고 정의할 것인지 아니면 아예 정의할 수 없거나 하지 말아야 하는지 따위 주요한 주제를 짚고 넘어가는 문제입니다. Comparing Objects를 읽어보세요.\n 분수(유리수) Apache Commons Math ™ 에 Fraction 클래스가 유리수(분수)를 구현합니다.\n\n","date":11772e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"3cfa2d69b85ddd89a85c9b7cd8be1117","permalink":"https://nhnacademy.github.io/archive/java/002/","publishdate":"2007-04-22T00:00:00Z","relpermalink":"/archive/java/002/","section":"archive","summary":"HashSet으로 1들의 집합을 만듭니다. import java.util.*; class Sameness { public static void 집합","tags":null,"title":"2","type":"book"},{"authors":null,"categories":null,"content":"cd 할 때 마다 ls 하기 번거로워 쉘 스크립트 lcd 짭니다.\n#!/usr/bin/env sh cd \u0026quot;$@\u0026quot; \u0026amp;\u0026amp; ls  lcd를 실험하는 코드를 씁니다.\n#!/usr/bin/env sh touch 1 2 3 ls [1-9]; mkdir folder \u0026amp;\u0026amp; cd folder \u0026amp;\u0026amp; touch 4 5 6 \u0026amp;\u0026amp; ls cd .. \u0026amp;\u0026amp; ./lcd folder ls [1-9] rm -rf folder 1 2 3 # 시험한 뒤 청소  1 2 3 4 5 6 4 5 6 1 2 3  기대와 다른 실험 결과입니다. pwd를 써서 이유를 설명하세요.\n도움말 귀띔  프로세스의 생명 주기를 제어하는 fork, exec, wait, exit 같은 system call을 알고, 그에 따라 쉘에서 스크립트가 돌아가면 어떤 과정이 연달아 일어나는지를 알아야 풀 수 있는 문제입니다. cd는 프로세스의 current working directory를 바꿉니다.   공부 거리  프로세스의 Current Working Directory를 알아내는 방법 - lsof, pwdx, etc.   ","date":11772e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"f59795203be46790d6e3bb2a4748f5c4","permalink":"https://nhnacademy.github.io/archive/linux/002/","publishdate":"2007-04-22T00:00:00Z","relpermalink":"/archive/linux/002/","section":"archive","summary":"cd 할 때 마다 ls 하기 번거로워 쉘 스크립트 lcd 짭니다. #!/usr/bin/env sh cd \u0026quot;$@\u0026quot; \u0026amp;\u0026amp; ls lc","tags":null,"title":"2","type":"book"},{"authors":null,"categories":null,"content":"emptyset = add = isin = union = lambda xs, ys : lambda x : xs( x ) or ys( x ) intersection = lambda xs, ys : lambda x : xs( x ) and ys( x ) complement = lambda xs : lambda x : not xs( x )  digits = lambda c : '0' \u0026lt;= c and '9' \u0026gt;= c print( [ isin( c, digits ) for c in 'c90@z3!'] ); alphabets = lambda c : 'A' \u0026lt;= c and 'z' \u0026gt;= c print( [ isin( c, alphabets ) for c in 'c90@z3!'] ); print( [ isin( c, union(alphabets, digits) ) for c in 'c90@z3!'] ); print( [ isin( c, complement(union(alphabets, digits)) ) for c in 'c90@z3!'] ); print( [ isin( c, complement(intersection(alphabets, digits)) ) for c in 'c90@z3!'] );  [False, True, True, False, False, True, False] [True, False, False, False, True, False, False] [True, True, True, False, True, True, False] [False, False, False, True, False, False, True] [True, True, True, True, True, True, True]  from functools import reduce add_all = { c if isin( c, add_all(emptyset, \u0026quot;c90@z3!\u0026quot;) ) else '' for c in '123456789' }  {'', '3', '9'}   emptyset, add, isin을 정의하세요. reduce를 써서 add_all을 정의하세요.  도움말 귀띔  집합에 원소가 속하는지를 답하는 참-거짓 함수(boolean-valued function, predicate)를 집합의 characteristic function이라고 합니다. 이 문제에서는 함수만으로 집합 타입을 나타냅니다. 함수로 집합을 나타낸다고 하면 언뜻 낯설지만, 사실은 프로그램을 짤 때 (집합 데이터 타입을 표현하는 한 가지 다른 방법이라는 또렷한 인식 없이) 자연스럽게 써오던 방법입니다. 보기를 들어, 짝수 홀수를 판단하는 predicate은 짝수 홀수 집합을 나타냅니다. 조건제시법(set builder form)으로 집합을 표기하는 것과 별다르지 않습니다.  isodd = lambda x: x % 2 == 1 iseven = lambda x : x % 2 == 0 # 두 predicate의 or는 홀수와 짝수의 합집합 곧 정수 집합을 표현합니다. isinteger = lambda x: iseven( x ) or isodd( x ) { i for i in filter( isodd, [ 0.9, 1.4, 2.0, 2, 3, 4.0001 ]) }  {3}   문제에서는 논리 연산을 쓰지만, 본디 산술 연산을 쓰는 것이 characteristic function으로 표현하는 집합 연산의 정의에 더 가깝습니다. 예를 들어 교집합과 여집합은 아래와 같이 정의합니다. 나머지 연산도 만들어 보세요.  intersection = lambda xs, ys : lambda x : xs( x ) * ys( x ) complement = lambda xs : lambda x : 1 - xs( x )   데이터 타입을 정의하는 연산을 구현하는 데는 여러 가지 (더러 색다른) 표현 방법이 있습니다. 데이터의 타입(type)과 표현(representation)을 구분 지어 프로그램을 짜는 버릇을 들이면 프로그램의 틀을 크게 손보지 않고 문제를 푸는데 알맞은 표현법을 바꿔 끼울 수 있도록 프로그램의 틀을 잡을 수 있습니다. 이 문제는 그렇게 생각하고 연습하는 버릇을 들이는 데 도움이 됩니다. 한편, Fuzzy Set은 characteristic function의 치역(range)을 0과 1 사의의 실수(real unit interval [0,1])로 늘려서 원소가 집합에 속하는 정도를 membership 함수로 나타낸 것이라 할 수 있습니다.   공부 거리  집합의 characteristic function python의 붙박이 집합   ","date":165456e4,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"7667ff1b199bb75f81347ab057d865ad","permalink":"https://nhnacademy.github.io/archive/cs/003/","publishdate":"2022-06-07T00:00:00Z","relpermalink":"/archive/cs/003/","section":"archive","summary":"emptyset = add = isin = union = lambda xs, ys : lambda x : xs( x ) or ys( x ) intersection = lambda xs, ys : lambda x","tags":null,"title":"3","type":"book"},{"authors":null,"categories":null,"content":"분수를 수천 개 만들어 쓰는 프로그램을 짜서 돌려 봤더니 분수의 수가 늘어날수록 속도가 떨어집니다. 분수를 만들 때마다 약분하기 때문입니다. 분자 분모가 필요할 때만 약분하도록 getter(또는 Selector)를 고칩니다.\nclass 분수 { public 분수(int numerator, int denominator) throws ArithmeticException { if ( 0 == denominator ) throw new ArithmeticException( \u0026quot;분모 0\u0026quot; ); 분자 = numerator; 분모 = denominator; if (denominator \u0026lt; 0) { 분자 = - numerator; 분모 = - denominator; } // 약분(); } public int getDenominator() { 약분(); return 분모; } public int getNumerator() { 약분(); return 분자; } public String toString() { return String.valueOf( 분자 ) + '/' + String.valueOf( 분모 ); } private void 약분() { int g = 최대공약수( Math.abs(분자), Math.abs(분모) ); { 분자 = 분자 / g; 분모 = 분모 / g; } } private static int 최대공약수(int x, int y) { return 0 == y ? x : 최대공약수(y, x % y); } private int 분모, 분자; } System.out.println( new 분수(2,4) ) // Jupyter Notebook에서만  2/4   기약 분수가 찍히지 않습니다. 코드에는 버그가 생겼습니다. 약분을 옮겼을 뿐인데 왜 없던 버그가 갑자기 생겼을까요? 잘못된 부분을 고쳐 써 봅시다. 분수의 abstraction barrier는 어떤 연산으로 이루어지나요? 고쳐 쓴 코드는 abstraction barrier를 무너뜨리지 않나요? 분수의 분자 분모를 바꾸는 setter가 필요한가요? setNumerator(int), setDenominator(int)는 분수 데이터의 abstraction barrier를 정의하는 데 포함되나요?  도움말 귀띔 데이터의 what과 how (또는 쓰는 쪽과 만드는 쪽 )을 경계 짓는 abstraction barrier를 무시하고 코드를 고쳐 쓸 때 생길 수 있는 버그를 잡는 과정에서 abstract data type이 제대로 이해하고 있는지 스스로 점검해 볼 수 있도록 꾸민 문제입니다.\n Abstraction Barrier 공부 거리  Marvin Zhang, Lecture 9: Data Abstraction CS 61A: The Structure and Interpretation of Computer Programs, Berkeley Harold Abelson and Gerald Jay Sussman with Julie Sussman, Abstraction Barriers, Introduction to Data Abstraction, Building Abstraction with Data, Structure and Interpretation of Computer Programs   ","date":11772e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"1d2a4d76ae00ea75fec8b50faa8617be","permalink":"https://nhnacademy.github.io/archive/java/003/","publishdate":"2007-04-22T00:00:00Z","relpermalink":"/archive/java/003/","section":"archive","summary":"분수를 수천 개 만들어 쓰는 프로그램을 짜서 돌려 봤더니 분수의 수가 늘어","tags":null,"title":"3","type":"book"},{"authors":null,"categories":null,"content":"#!/usr/bin/env bash do-something() { [ $# -lt 1 ] \u0026amp;\u0026amp; exit 1 for var in \u0026quot;$@\u0026quot;; do if [ -z \u0026quot;${!var:-}\u0026quot; ]; then exit 1 fi done exit 0 }  아래와 같이 실험합니다.\n$ chmod +x do-something $ echo $SHLVL $ bash $ echo $SHLVL $ ./do-something $ do-something $ . do-something $ bash $ do-something $ exit $ do-something $ echo $SHLVL   실험 결과를 설명하세요. 마지막 do-something처럼 동작하면 쓸모가 없습니다. 쉘에서 쓸 수 있는 명령이 되도록 고칩니다. do-something이 하는 일에 알맞은 이름을 지어주세요.  도움말 귀띔  man bash | grep SHLVL man chmod | grep mode Difference between return and exit in Bash functions Do functions run as subprocesses in Bash?   참고 자료  3.5.3 Shell Parameter Expansion, GNU Bash manual 3.3 Shell Functions, GNU Bash manual  \n","date":11772e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"0586978527fe2cef3170518e69aec8da","permalink":"https://nhnacademy.github.io/archive/linux/003/","publishdate":"2007-04-22T00:00:00Z","relpermalink":"/archive/linux/003/","section":"archive","summary":"#!/usr/bin/env bash do-something() { [ $# -lt 1 ] \u0026amp;\u0026amp; exit 1 for var in \u0026quot;$@\u0026quot;; do if [ -z \u0026quot;${!var:-}\u0026quot; ]; then exit 1 fi done exit 0 }","tags":null,"title":"3","type":"book"},{"authors":null,"categories":null,"content":"// 4.c #include \u0026lt;string.h\u0026gt; int main(void) { char *s = \u0026quot;0124\u0026quot;; s[ 3 ] = '4'; s[ -1 ] = '4'; s[ strlen(s) - 1 ] = '3'; s[ strlen(s) ] = '4'; return 0; }   문제점을 모두 짚고 이유를 설명합니다. 문제가 없도록 고친 코드 4-1.c를 만듭니다. cc -Wall -Wextra 4.c의 결과를 설명합니다. 예측한 문제점을 모두 잡아내나요? ./a.out의 결과를 설명하세요. c++ 4.c이 결과를 설명하세요. cppcheck 4.c의 결과를 설명하세요. 예측한 문제점과 이유를 모두 잡아내나요? flawfinder 4.c의 결과를 설명하세요. 예측한 문제점과 이유를 모두 잡아내나요? 4-1.c로 같은 실험을 되풀이합니다. 결과를 설명하세요. 문제가 없도록 고치세요. cppcheck, flawfinder가 도움이 되나요?  도움말 귀띔  TR30-C. Do not attempt to modify string literals cppcheck flawfinder C/C++ Advanced Lint for VS Code   참고  lint clang vs gcc static analysis awesome linters   ","date":1655856e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656088328,"objectID":"16ab3f5b442faab5fde996ebc54bdbb1","permalink":"https://nhnacademy.github.io/archive/cs/004/","publishdate":"2022-06-22T00:00:00Z","relpermalink":"/archive/cs/004/","section":"archive","summary":"// 4.c #include \u0026lt;string.h\u0026gt; int main(void) { char *s = \u0026quot;0124\u0026quot;; s[ 3 ] = '4'; s[ -1 ] = '4'; s[ strlen(s) - 1 ] = '3'; s[ strlen(s)","tags":null,"title":"4","type":"book"},{"authors":null,"categories":null,"content":"classDiagram 동물 \u0026lt;|-- 젖먹이동물 동물 \u0026lt;|-- 새 젖먹이동물 \u0026lt;|-- 박쥐 새 \u0026lt;|-- 펭귄 새 \u0026lt;|-- 참새  abstract class 동물 { public String type() { return this.getClass().getSimpleName(); } }  class Typing { public static void 날수있니( 동물 x ) { System.out.println( x.type() + (x.날수있니()? \u0026quot;는(은) 날 수 있어.\u0026quot;: \u0026quot;는(은) 못날아.\u0026quot;) ); } } // Jupyter Notebook에서만 Typing.날수있니( new 박쥐() ); Typing.날수있니( new 펭귄() ); Typing.날수있니( new 참새() );   박쥐, 참새는 날 수 있으나 펭귄은 못난다고 찍히도록 코드를 적습니다. 동물을 interface로 정의하세요. 무엇이 더 알맞은 표현인가요? 모든 동물에게 boolean 헤엄칠수있니()를 물어볼 수 있도록 코드를 늘립니다. 이렇게 연산을 새로 보태는 일에 inheritance와 method overriding은 어떤 도움을 주나요?  class Typing { public static void 날수있니( 날수있는 x ) { System.out.println( x + \u0026quot;는(은) 날 수 있어.\u0026quot; ); } } // Jupyter Notebook에서만 Typing.날수있니( new 박쥐() ); Typing.날수있니( new 참새() ); Typing.날수있니( new 펭귄() );   박쥐, 참새는 날 수 있지만, 펭귄은 날수있는 타입이 아니라는 에러가 나게 코드를 고칩니다. 동물을 interface로 정의할 수 있나요? 동물을 헤엄치는 타입으로 분류할 수 있게끔 코드를 쓰세요. 이렇게 타입을 새로 보태는 일에 interface는 어떤 도움이 되나요?  도움말 귀띔  Java 언어의 abstract class, abstract method, interface, default method가 서로 같고도 다른 점이 무엇인지 또렷이 알고 제대로 쓸 수 있는지를 정리해보는 문제입니다. 상속 곧 구현을 빌어오는 class 관계를 두고 subclassing이라고 하고 A class의 구현을 B class가 내려받으면 B는 A의 subclass라고 합니다. 이와 달리 A class가 따르는 모든 조건 곧 타입을 B class 역시 모두 따르기 때문에 A가 필요한 모든 코드 문맥에서 B가 A를 맞바꿀 수 있는 class 관계를 두고 subtyping이라고 하는데, 이때 B는 A의 subtype이라고 합니다. 일부에서는 subclassing을 implementation inheritance, subtyping을 interface inheritance라고 일컫기도 합니다. 하지만 subtyping은 type compatibility 관계를 규정하는 표현으로, 코드를 복제하는 inheritance와는 아무런 관계가 없으니 두 낱말을 뒤섞어 쓰지 않는 것이 바람직합니다. 흔히 Object-Oriented Programming(OOP)이라고 일컫는 프로그래밍 스타일에서 주목하는 코드의 되 쓰임새(reusability)란 subtyping 관계가 이끌어내는 코드의 다형성(polymorphism), 줄여서 subtype polymorphism에서 파생되는 이점입니다. 분별없이 쓰는 혼잡한 용어를 정리하고 간결하고 또렷이 개념을 잡는 것이 되 쓰임새가 뛰어난 프로그램을 설계하는데 중요할 때가 있습니다. 이 문제는 그런 공부에 도움이 됩니다.   참고 문헌  Subtyping vs. inheritance Subtyping vs. inheritance - Counterexamples in Type Systems Subtype polymorphism, Liskov Substitution Principle(LSP), Rensselaer Polytechnic Institute   ","date":1182124800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"8a9b02a363cd2d5cce5047c6525fa310","permalink":"https://nhnacademy.github.io/archive/java/004/","publishdate":"2007-06-18T00:00:00Z","relpermalink":"/archive/java/004/","section":"archive","summary":"classDiagram 동물 \u0026lt;|-- 젖먹이동물 동물 \u0026lt;|-- 새 젖먹이동물 \u0026lt;|-- 박쥐 새 \u0026lt;|-- 펭귄 새 \u0026lt;|-- 참새 abstract","tags":null,"title":"4","type":"book"},{"authors":null,"categories":null,"content":"class F { X m() { System.out.println(\u0026quot;F\u0026quot;); return new X(); } } class G extends F { Y m() { System.out.println(\u0026quot;G\u0026quot;); return new Y(); } public static void test() { F f = new G(); f.m(); } } G.test();  G   G가 찍히도록 X와 Y를 정의하세요. 이와 같은 method overriding 규칙으로 얻게 되는 이점은 무엇인가요?  도움말 귀띔  Covariant (method) return type 규칙을 되짚어 봅니다.   참고 문헌  Covariant return type Liskov Substitution Principle(LSP) Covariance and contravariance   ","date":1182124800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"673d8e89884e2f8eb63dc4331c19fea2","permalink":"https://nhnacademy.github.io/archive/java/005/","publishdate":"2007-06-18T00:00:00Z","relpermalink":"/archive/java/005/","section":"archive","summary":"class F { X m() { System.out.println(\u0026quot;F\u0026quot;); return new X(); } } class G extends F { Y m() { System.out.println(\u0026quot;G\u0026quot;); return new Y(); } public static void test() {","tags":null,"title":"5","type":"book"},{"authors":null,"categories":null,"content":"import java.util.function.*; interface Combinator { public static \u0026lt;T, U, R\u0026gt; Function\u0026lt;U, R\u0026gt; leftSection(BiFunction\u0026lt;T, U, R\u0026gt; f, T left) { return right -\u0026gt; f.apply(left, right); } public static \u0026lt;T, U, R\u0026gt; Function\u0026lt;T, R\u0026gt; rightSection(BiFunction\u0026lt;T, U, R\u0026gt; f, U right) { return left -\u0026gt; f.apply( left, right ); } // public static ... flip(...) { ... } // public static ... toUnary(...) { ... } public static void main(String[] args) { BinaryOperator\u0026lt;Number\u0026gt; minus = ( x, y ) -\u0026gt; x.doubleValue() - y.doubleValue(); System.out.println( leftSection( minus, 4 ).apply( 3 ) ); System.out.println( rightSection( minus, 4 ).apply( 3 ) ); // ... concat = ... System.out.println( leftSection( flip( concat ), \u0026quot;5\u0026quot; ).apply(\u0026quot;10\u0026quot;).equals( rightSection( concat, \u0026quot;5\u0026quot; ).apply( \u0026quot;10\u0026quot; ) ) ); System.out.println( rightSection( minus, 4 ).apply( 3 ).equals( toUnary( flip( minus ) ).apply( 4 ).apply( 3 ) ) ); } }  flip, toUnary, concat을 정의하세요.\n도움말 귀띔  toUnary( minus )하지 않고 lambda expression으로 currying function(partial function application)을 표현할 수 있습니다.  Function\u0026lt;Double, UnaryOperator\u0026lt;Double\u0026gt;\u0026gt; minus = x -\u0026gt; y -\u0026gt; x - y; System.out.println( minus.apply( 3.0 ).apply( 5.0 ) ); // 3+5를 찍으세요.   하지만 새로운 함수를 매번 만들어 쓰시 않고 작지만 되쓰임새가 또렷한 함수를 조립해서 쓰는 버릇을 기르는 게 함수로 프로그램 짜는 방식(functional programming style)을 익히는 데 도움이 됩니다. leftSection, rightSection은 Haskell 언어의 간편 표기법을 흉내 낸 함수입니다. functional inteface, java.lang.function의 쓰임새를 알고 generics (parametric polymorphism)와 type inference의 기본을 아울러 익히는 데 도움이 되는 문제입니다. 한계점도 정확히 알고 있는 것이 시간과 노력을 아끼는 방법입니다. 문제도 풀어보세요.   참고 문헌  Parametric Polymorphism in Java What is currying? (stackoverflow) Lambda Calculus and Combinatory Logic   ","date":1182124800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"96c09243db064dce321cb0d7651acaa2","permalink":"https://nhnacademy.github.io/archive/java/006/","publishdate":"2007-06-18T00:00:00Z","relpermalink":"/archive/java/006/","section":"archive","summary":"import java.util.function.*; interface Combinator { public static \u0026lt;T, U, R\u0026gt; Function\u0026lt;U, R\u0026gt; leftSection(BiFunction\u0026lt;T, U, R\u0026gt; f, T left) { return right -\u0026gt; f.apply(left, right); } public static \u0026lt;T, U, R\u0026gt;","tags":null,"title":"6","type":"book"},{"authors":null,"categories":null,"content":"interface Top { default void accept(Visitor v) { v.visit( this ); } } class Left implements Top { } class Right implements Top { } interface Visitor { default void visit(Top top) { throw new NoSuchMethodError(); } void visit(Left left); void visit(Right right); } class 걸어 implements Visitor { public void visit(Left left) { System.out.println(\u0026quot;왼쪽으로 걸어\u0026quot;);}; public void visit(Right right) { System.out.println(\u0026quot;오른쪽으로 걸어\u0026quot;);} } class 뛰어 implements Visitor { public void visit(Left left) { System.out.println(\u0026quot;왼쪽으로 뛰어\u0026quot;);}; public void visit(Right right) { System.out.println(\u0026quot;오른쪽으로 뛰어\u0026quot;);} } class 실험 { public static void main(String[] args) { Top leftTop = new Left(); Top rightTop = new Right(); leftTop.accept( new 걸어() ); rightTop.accept( new 뛰어() ); } }  왼쪽으로 걸어 오른쪽으로 뛰어   위와 같은 글이 찍히도록 코드를 고쳐보세요.  도움말 귀띔  Expression을 꼭지로 하는 abstract syntax tree(AST)를 evaluate하는 코드를 짠다고 할 때, e의 runtime type에 따라 알맞은 연산을 찾아가도록 아래처럼 코드를 쓸 수 있습니다.  interface Expression { ... } // Abstract Syntax Tree class Variable implements Expression { ... } class Constant implements Expression { ... } abstract class Application implements Expression { ... } class BinaryApplication extends Application { ... } class Environment { ... } // Symbol tables class Evaluator { ... public Expression evaluate(Expression e, Environment r) { // dispatch on type if (e instanceof Constant ) return evaluateContant(e, r); else if (e instanceof Variable ) return evaluateVariable(e, r); else if (e instanceof BinaryApplication) return evaluateBinaryApplication(e, r); else throw ...; } }   method overrding으로 evaluate를 간추릴 수 있습니다.  interface Expression { public Expression evaluate(Environment r); ... } // Abstract Syntax Tree class Variable implements Expression { public Expression evaluate(Environment r) {...} ... } class Value implements Expression { public Expression evaluate(Environment r) {...} ... } abstract class Application implements Expression { ... } class BinaryApplication extends Application { public Expression evaluate(Environment r) {...} ... } class Environment { ... } // Symbol tables   f( a0 ... an )에서 인자의 runtime type에 대응하여 알맞은 함수를 찾아가는 기능을 dynamic dispatch (on type)라 합니다. 특히 a0의 runtime type만 반영하는 경우를 두고 single dispatch라 하는데 이를 또렷히 하기 위해서 a0.f(a1 ... an) 같이 표현할 수 있습니다. method overriding이란 single dispatch를 일컫는 방언으로 a0를 object, f를 message, a0의 runtime type에 따라 f에 대응하는 함수를 method라고 합니다. method overriding은 subtyping으로 새로운 기능을 늘리고자 할 때 도움이 됩니다. 그와 달리, 새로운 연산을 더할 때는 (Evaluator와 비슷하게) 데이터 타입과 연산을 분리하여 새로운 연산을 보태기에 좋은 설계 방식 곧 Visitor 패턴을 쓰는 것이 더 유리할 수 있습니다. 이 문제는 method overriding 곧 single dispatch의 목적과 한계를 이해하는 과정에서 visitor 패턴의 쓰임새를 살펴보는 데 보탬이 됩니다.   참고 자료  Dynamic Method Dispatch or Runtime Polymorphism in Java, GeeksforGeeks   ","date":1182124800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261680,"objectID":"02da0a6150c8cd38bcaa591d2761edc2","permalink":"https://nhnacademy.github.io/archive/java/007/","publishdate":"2007-06-18T00:00:00Z","relpermalink":"/archive/java/007/","section":"archive","summary":"interface Top { default void accept(Visitor v) { v.visit( this ); } } class Left implements Top { } class Right implements Top { } interface Visitor { default void","tags":null,"title":"7","type":"book"},{"authors":null,"categories":null,"content":"Java 백엔드 개발 과정에 응시하기 위해 갖추어야 할 지식은 무엇인가요?  NHN Track(전산학 기초)   선발 시험은 어떻게 진행되나요?  선발 과정을 거쳐 선발합니다. 선발 과정에 참여하지 않고 지원하신 분께는 일정 및 안내 사항을 개별 메일로 전달해 드립니다.   교육 과정은 어떻게 진행하나요?  모든 교육은 풀타임(오전 9시-오후 6시) 오프라인으로 진행합니다. Covid-19 감염과 같은 불가피한 경우에만 온라인 참석을 인정합니다. 모든 교육 과정은 이론 강의와 실습을 병행합니다.   수강료 결제는 어떻게 하나요?  선발된 분에게 개별 메일로 결제 링크를 안내해 드립니다. 카드 결제, 무통장 입금이 가능합니다.   최소 노트북 사양은 어떻게 되나요?  IntelliJ IDEA를 쓸 수 있는 사양이면 됩니다.   기숙사를 지원하나요?  지역에서 일할 인재를 양성하기 위하여 마련된 프로그램이기 때문에 주거 시설을 별도로 지원하지는 않습니다.   Covid-19에 감염되면 교육에 어떻게 참여하나요?  확진된 연수생은 화상 회의 플랫폼으로 실시간 온라인 수업에 참여할 수 있습니다.   ※ 모집 설명회에서 교육 과정, 평가, 채용 연계에 대하여 상세하게 안내해 드립니다.\n","date":1650499200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1654958971,"objectID":"4a1318da06786ac52626178ca960109e","permalink":"https://nhnacademy.github.io/faq/","publishdate":"2022-04-21T00:00:00Z","relpermalink":"/faq/","section":"","summary":"Java 백엔드 개발 과정에 응시하기 위해 갖추어야 할 지식은 무엇인가요? NHN","tags":null,"title":"FAQ","type":"page"},{"authors":null,"categories":null,"content":"NHN의 소프트웨어 기술 전문가들이 소프트웨어 개발 직무 기술을 익히는데 필요한 전산학의 기초를 NHN Track이란 이름으로 정리한 교육 과정입니다.\n 프로그래밍 개론(Introduction to Programming) 자료 구조와 알고리즘(Data Structure \u0026amp; Algorithm) 운영체제(Understanding of Operating System) 데이터베이스(Data Processing System) 컴퓨터 통신과 통신망(Computer Communications \u0026amp; Networking) 고급 프로그래밍(Advanced Programming) 시스템 프로그래밍(System Programming)   경상남도 USG 공유대학에서는 NHN Track 가운데 5개 과정을 이수한 학생에게 NHN 아카데미 연수 과정에 지원 자격을 주기로 하였습니다. 프로그래밍 개론과 고급 프로그래밍은 선발 과정에 참여하는 것으로 대체할 수 있습니다. 대학 전산학 기초 과정과 크게 다르지 않기때문에 세부 교안은 생략합니다.  ","date":1612137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261764,"objectID":"6609ba518f1e442fe26dd8373bd24b4e","permalink":"https://nhnacademy.github.io/courses/nhn_track/","publishdate":"2021-02-01T00:00:00Z","relpermalink":"/courses/nhn_track/","section":"courses","summary":"NHN이 정리한 필수 전산학 기초 과정입니다.","tags":null,"title":"전산학 기초","type":"book"},{"authors":null,"categories":null,"content":" NHN의 기술과 경험을 전수하여 직무에 필요한 기량을 갖출 수 있도록 개발된 프로그램입니다. 연수 과정에 지원하려면 선발 과정을 거치거나 시험을 치러야 합니다. 연수에 필요한 기초와 개발자에 적합한 성향을 갖추었는지 확인하는 절차입니다. 연수 프로그램은 크게 도구와 기술, 프로젝트 두 단계로 이루어집니다. 도구와 기술 단계에서는 직무에 필요한 솜씨(skill, 기술)를 기르고, 솜씨를 부리는 데 도움이 되는 도구(tools)를 익힙니다. 프로젝트 단계에서는 팀으로 일하는 방법을 배웁니다.  팀 단위로 일감을 나누고, 조각난 결과를 엮어서 한 몸으로 움직이도록 조립하고 배치하고 운영하는 과정에서 실무를 경험합니다. 함께 어울려 일하는 데 알맞은 태도를 배웁니다.     주차/강의/교수/시수는 실제와 차이가 있습니다. 과정에 대한 이해를 돕고자 정리한 예시입니다.   선발    주차 강의 교수 시수      0 오리엔테이션 -     1, 2 Java 기본 과정 NHN Academy 멘토NHN Academy 개발실 조던 80 (2주)    3 HTML/CSS/JavaScript NHN Academy 랜디NHN Academy 마르코 40 (1주)     도구+기술    주차 강의 교수 시수      4 개발 환경 설정 NHN Dooray 개발실 동묘\nNHN Edu 아이앰티쳐팀 코코 40 (1주)    5 TDD/클린코드 NHN Dooray 개발실 조던 40 (1주)    6 네트워크 기초와 Java App 개발 NHN Dooray 개발실 만티 40 (1주)    7 웹 개발 기초와 Spring MVC NHN Dooray 개발실 동묘 40 (1주)    8 데이터베이스 설계 및 SQL NHN 데이터운영팀 오션 40 (1주)    9 데이터베이스 응용 프로그램 개발 1 NHN Dooray 개발실 만티 40 (1주)    10 데이터베이스 응용 프로그램 개발 2 NHN Dooray 개발실 동묘 40 (1주)    11 인증 개발 NHN Dooray 개발실 동묘 32 (1주)    12 Spring Boot를 이용한 마이크로서비스 개발 NHN Dooray 개발실 동묘 40 (1주)    13 REST / Test NHN Dooray 개발실 콤틴 40 (1주)     프로젝트    주차 마일스톤 시수 비고      14 Team Building 32 (1주)     15 프로젝트 요구사항 분석 32 (1주) 특강: 데이터베이스 설계    16 데이터베이스 배포 40 (1주)     17 프로젝트에서의 코드 작성 40 (1주)     18 TDD 적용 32 (1주)     19 응용 프로그램 아키텍처 설계 32 (1주)     20 REST API 40 (1주)     21 객체지향 리팩토링 40 (1주)     22 웹 서버 스케일 아웃 40 (1주) 특강: 웹 서버 스케일 아웃    23 DB 서버 스케일 아웃 40 (1주) 특강: DB 서버 스케일 아웃    24 안정적인 서비스 운영 40 (1주) 특강: 안정적인 서비스 운영    25 최종 프로젝트 점검 40 (1주)      ","date":1654905600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655261764,"objectID":"3f4a8313411aad503af2f8707dba8410","permalink":"https://nhnacademy.github.io/courses/java/","publishdate":"2022-06-11T00:00:00Z","relpermalink":"/courses/java/","section":"courses","summary":"NHN Dooray!의 Java 벡엔드 개발 경험을 전수합니다.","tags":null,"title":"Java 백엔드 개발","type":"book"},{"authors":[],"categories":null,"content":"","date":1655078400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655084850,"objectID":"b37fce5b5176fdba41b3677c10571787","permalink":"https://nhnacademy.github.io/talk/%EA%B4%91%EC%A3%BC-1%EA%B8%B0-%EB%AA%A8%EC%A7%91/","publishdate":"2022-06-13T00:00:00Z","relpermalink":"/talk/%EA%B4%91%EC%A3%BC-1%EA%B8%B0-%EB%AA%A8%EC%A7%91/","section":"event","summary":"조선대학교와 함께하는 NHN 아카데미 광주 1기 교육생 모집","tags":[],"title":"광주 1기 모집","type":"event"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  **Two**  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640177367,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://nhnacademy.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"엔에이치엔아카데미 주식회사(이사 \u0026ldquo;회사\u0026quot;라 함)은 정보통신서비스제공자가 준수하여야 하는 대한민국의 관계 법령 및 개인정보보호 규정을 준수하며, 관련 법령에 의거한 개인정보 처리방침을 정하여 이용자 권익 보호에 최선을 다하고 있습니다.\n회사는 아래와 같이 개인정보를 보호하고 있으며 내용은 다음과 같습니다.\n 수집하는 개인정보의 항목 및 수집방법  수집하는 개인정보의 항목 개인정보 수집방법   개인정보의 수집 및 이용목적 개인정보 공유 및 제공 개인정보 처리위탁 개인정보 보유 및 이용기간  회사 내부 방침에 의한 정보 보존 사유  부정이용기록   관련법령에 의한 정보 보존 사유  서비스 이용에 관한 로그기록 소비자의 불만 또는 분쟁처리에 관한 기록 계약 또는 청약철회 등에 관한 기록 대금결제 및 재화 등의 공급에 관한 기록 전자세금계산서 서비스 이용자에 한하여 세금계산서 발급에 관한     개인정보 파기절차 및 방법  파기절차 파기방법   이용자 및 법정대리인의 권리와 그 행사방법 개인정보 자동 수집 장치의 설치/운영 및 거부에 관한 사항  쿠키란 쿠키의 사용 목적 쿠키의 설치/운영 및 거부 모바일 서비스에서의 쿠키 설치 운영에 관한 사항   개인정보의 기술적/관리적 보호대책  비밀번호 암호화 해킹 등에 대비한 대책 처리 직원의 최소화 및 교육 개인정보보호전담기구의 운영   개인정보 보호책임자 및 연락처 기타 고지의 의무  수집하는 개인정보의 항목 및 수집방법 수집하는 개인정보의 항목  교육 과정 지원 시 아래와 같은 개인정보를 수집하고 있습니다.  이름, 생년월일, 주소, 휴대폰번호, 이메일 주소, 학력사항, 경력사항, 병역사항(면제사유 및 복무계획), 자격사항, 수상내역   환불 시 아래와 같은 개인정보를 수집합니다.  계좌정보(은행명, 예금주명, 계좌번호), 결제 정보   서비스 이용과정에서 아래와 같은 정보가 생성되어 수집될 수 있습니다.  IP Address, 쿠키, 방문 일시, 서비스 이용 기록, 부정 이용 기록, 결제·구매기록    개인정보 수집방법 회사는 다음과 같은 방법으로 개인정보를 수집합니다.\n 홈페이지, 모바일기기, 이메일 협력사로부터의 제공 생성정보 수집 툴을 통한 수집  개인정보의 수집 및 이용목적 회사는 수집한 개인정보를 다음의 목적을 위해 활용합니다.\n 이용자와 약속한 서비스 제공, 서비스 제공에 따른 본인인증, 교육 콘텐츠 제공, 구매 및 요금결제, 상품 및 서비스의 배송을 위하여 개인정보를 이용합니다. 교육 과정 지원 의사의 확인, 연령확인, 이용자 본인 확인 및 식별, 회원탈퇴 의사의 확인, 문의사항 또는 불만처리 등 회원관리를 위하여 개인정보를 이용합니다. 법령 및 이용약관을 위반하는 회원에 대한 이용 제한 조치, 부정 이용 행위를 포함하여 서비스의 원활한 운영에 지장을 주는 행위 및 비인가 행위에 대한 방지 및 제재, 계정도용 및 부정거래 방지, 고지사항 전달, 분쟁 조정을 위한 기록보존 등 이용자 보호 및 서비스 운영을 위하여 개인정보를 이용합니다.  개인정보 공유 및 제공 회사는 이용자들의 개인정보를 \u0026ldquo;개인정보의 수집목적 및 이용목적\u0026rdquo; 고지한 범위 내에서 사용하며, 이용자의 사전 동의 없이는 동 범위를 초과하여 이용하거나 원칙적으로 이용자의 개인정보를 제공하지 않습니다. 다만, 아래의 경우에는 예외로 합니다.\n 이용자가 사전에 동의한 경우 서비스 제공에 따른 요금정산을 위해 필요한 경우 법령의 규정에 의거하거나, 수사 목적으로 법령에 정해진 절차와 방법에 따라 수사기관의 요구가 있는 경우  개인정보 처리위탁 회사는 서비스 향상을 위해서 아래와 같이 개인정보를 위탁하고 있으며, 관계 법령에 따라 위탁계약 시 개인정보가 안전하게 관리될 수 있도록 필요한 사항을 규정하고 있습니다. 회사의 개인정보 위탁처리 기관 및 위탁업무 내용은 아래와 같습니다.\n   수탁업체 위탁업무내용     엔에이치엔(주) 서비스 제공을 위한 시스템 개발 및 인프라 운영 등의 업무, 문자 서비스 및 카카오 알림톡 발송 대행   엔에이치엔서비스(주) 고객상담 지원, 서비스 테스트   엔에이치엔페이코(주) PAYCO 신용카드 결제수단 등록, 결제 및 빌링시스템 운영   앨리스코딩(주) 강의, 동영상 등 콘텐츠 제공을 위한 인프라    개인정보 보유 및 이용기간 회사는 원칙적으로 이용자로부터 동의 받은 개인정보 보유∙이용기간까지 처리∙보유하며 처리목적이 달성되거나 동의 받은 기간 경과 시 해당 정보는 지체없이 파기합니다. 그 외에도 다음의 정보에 대해서는 아래의 이유로 명시한 기간 동안 보존합니다.\n회사 내부 방침에 의한 정보 보존 사유 부정이용기록  보존 이유: 부정이용 방지 및 고객 상담 대응 등 보존 기간: 수집일로부터 1년  관련법령에 의한 정보 보존 사유 상법, 전자상거래 등에서의 소비자보호에 관한 법률 등 관계법령의 규정에 의하여 보존할 필요가 있는 경우 회사는 관계법령에서 정한 일정한 기간 동안 회원정보를 보존합니다. 이 경우 회사는 보존하는 정보를 그 보존의 목적으로만 이용하며 보존기간은 아래와 같습니다.\n서비스 이용에 관한 로그기록  보존 이유: 통신비밀보호법 보존 기간: 3개월  소비자의 불만 또는 분쟁처리에 관한 기록  보존 이유: 전자상거래 등에서의 소비자보호에 관한 법률 보존 기간: 3년  계약 또는 청약철회 등에 관한 기록  보존 이유: 전자상거래 등에서의 소비자보호에 관한 법률 보존 기간: 5년  대금결제 및 재화 등의 공급에 관한 기록  보존 이유: 전자상거래 등에서의 소비자보호에 관한 법률 보존 기간: 5년  전자세금계산서 서비스 이용자에 한하여 세금계산서 발급에 관한  기록   보존 이유: 국세청고시(2016-3호) 보존 기간: 3년  개인정보 파기절차 및 방법 이용자의 개인정보는 원칙적으로 개인정보의 수집 및 이용목적이 달성되면 지체 없이 파기합니다.\n파기절차 이용자의 개인정보는 목적이 달성된 후 별도의 DB로 옮겨져(종이의 경우 별도의 서류함) 내부 방침 및 기타 관련 법령에 의한 정보보호 사유에 따라(개인정보 보유 및 이용기간 참조)일정 기간 저장된 후 파기됩니다. 동 개인정보는 법률에 의한 경우가 아니고서는 보유되는 이외의 다른 목적으로 이용되지 않습니다.\n파기방법 종이에 출력된 개인정보는 분쇄기로 분쇄하거나 소각을 통하여 파기합니다. 전자적 파일 형태로 저장된 개인정보는 기록을 재생할 수 없는 기술적 방법을 사용하여 삭제합니다.\n이용자 및 법정대리인의 권리와 그 행사방법 이용자 및 법정 대리인은 언제든지 등록되어 있는 자신 혹은 당해 만 14세 미만 아동의 개인정보를 조회하거나 수정할 수 있으며, 회사의 개인정보의 처리에 동의하지 않는 경우 동의 거부를 요청하실 수 있습니다.\n다만, 그러한 경우 서비스의 일부 또는 전부 이용이 어려울 수 있음을 알려드립니다. 이용자 혹은 만 14세 미만 아동의 개인정보 조회 및 수정을 위해 개인정보 보호책임자에게 서면, 전화 또는 이메일로 연락하시면 지체 없이 조치하겠습니다.\n이용자가 개인정보의 오류에 대한 정정을 요청하신 경우에는 정정을 완료하기 전까지 당해 개인정보를 이용 또는 제공하지 않습니다. 또한 잘못된 개인정보를 제3자에게 이미 제공한 경우에는 정정 처리결과를 제3자에게 지체 없이 통지하여 정정이 이루어지도록 하겠습니다. 회사는 이용자 혹은 법정 대리인의 요청에 의해 해지 또는 삭제된 개인정보는 \u0026ldquo;개인정보의 보유 및 이용기간\u0026rdquo; 명시된 바에 따라 처리하고 그 외의 용도로 열람 또는 이용할 수 없도록 처리하고 있습니다.\n개인정보 자동 수집 장치의 설치/운영 및 거부에 관한 사항 이용자의 개인정보는 원칙적으로 개인정보의 수집 및 이용목적이 달성되면 지체 없이 파기합니다.\n쿠키란 회사는 개인화되고 맞춤화된 서비스를 제공하기 위해서 이용자의 정보를 저장하고 수시로 불러오는 \u0026ldquo;쿠키(cookie)\u0026ldquo;를 사용합니다. 쿠키는 웹사이트를 운영하는데 이용되는 서버가 이용자의 브라우저에게 보내는 아주 작은 텍스트 파일로 이용자 컴퓨터의 하드디스크에 저장됩니다.\n쿠키의 사용 목적 이용자들이 이용한 회사의 각 서비스와 이용형태 등을 분석하여 이용자에게 최적화된 맞춤형 정보를 제공하기 위하여 쿠키를 이용합니다.\n쿠키의 설치/운영 및 거부 이용자는 쿠키 설치에 대한 선택권을 가지고 있습니다. 따라서 이용자는 웹 브라우저에서 옵션을 설정함으로써 모든 쿠키를 허용하거나, 쿠키가 저장될 때마다 확인을 거치거나, 아니면 모든 쿠키의 저장을 거부할 수도 있습니다. 다만, 쿠키의 저장을 거부할 경우에는 로그인이 필요한 회사의 일부 서비스는 이용에 어려움이 있을 수 있습니다.\n 쿠키 설치 허용 여부를 지정하는 방법  Internet Explorer 웹 브라우저: [도구] \u0026gt; [인터넷 옵션] \u0026gt; [개인정보] 탭 \u0026gt; [고급] 변경 Chrome 웹 브라우저: 우측 상단 메뉴 [설정] \u0026gt; [개인정보 및 보안] \u0026gt; [사이트 설정] \u0026gt; [쿠키 및 사이트 데이터] 설정    모바일 서비스에서의 쿠키 설치 운영에 관한 사항 회사는 PC 환경과 동일•유사한 인터넷 환경을 모바일 서비스에서도 제공하기 위해 모바일 기기(예: 스마트 폰, 태블릿 PC)에서도 \u0026ldquo;쿠키(cookie)\u0026ldquo;를 사용할 수 있습니다. 단, 회사는 이용자의 명시적인 동의없이 개인정보를 포함하는 제3자의 쿠키를 임의로 수집하지 않습니다. 모바일 기기에서도 웹 브라우저 설정 기능에서 쿠키 허용 여부를 선택할 수 있습니다. 모바일 기기의 운영체제 및 웹 브라우저 종류에 따라 다소 상이할 수 있지만, 대부분의 경우 모바일 웹 브라우저의 환경 설정을 통해 쿠키허용 여부를 결정하거나, 기존의 쿠키 일체를 삭제할 수 있습니다. 다만 쿠키의 저장을 거부할 경우, 로그인이 필요한 일부 서비스의 이용에 불편함이 있을 수 있습니다.\n 쿠키 설치 허용 여부를 지정하는 방법  Chrome 웹 브라우저: 우측 상단 메뉴 [설정] \u0026gt; [고급] \u0026gt; [사이트 설정] \u0026gt; [쿠키] 설정 Safari 웹 브라우저: [설정] \u0026gt; [Safari] \u0026gt; [모든 쿠키 차단] \u0026gt; 설정    개인정보의 기술적/관리적 보호대책 회사는 이용자들의 개인정보를 처리함에 있어 개인정보가 분실, 도난, 누출, 변조 또는 훼손되지 않도록 안전성 확보를 위하여 다음과 같은 기술적/관리적 대책을 강구하고 있습니다.\n비밀번호 암호화 회원 ID의 비밀번호는 암호화되어 저장 및 관리되고 있어 본인만이 알고 있으며, 개인정보의 확인 및 변경도 비밀번호를 알고 있는 본인에 의해서만 가능합니다.\n해킹 등에 대비한 대책 회사는 해킹이나 컴퓨터 바이러스 등에 의해 회원의 개인정보가 유출되거나 훼손되는 것을 막기 위해 최선을 다하고 있습니다. 개인정보의 훼손에 대비해서 자료를 수시로 백업하고 있고, 최신 백신프로그램을 이용하여 이용자들의 개인정보나 자료가 누출되거나 손상되지 않도록 방지하고 있으며, 암호화 통신 등을 통하여 네트워크상에서 개인정보를 안전하게 전송할 수 있도록 하고 있습니다. 그리고 침입차단시스템을 이용하여 외부로부터의 무단 접근을 통제하고 있으며, 기타 시스템적으로 보안성을 확보하기 위한 가능한 모든 기술적 장치를 갖추려 노력하고 있습니다.\n처리 직원의 최소화 및 교육 회사의 개인정보관련 처리 직원은 담당자에 한정시키고 있으며, 담당자에 대한 수시 교육을 수행하여 회사 개인정보 처리방침의 준수를 항상 강조하고 있습니다.\n개인정보보호전담기구의 운영 회사는 사내 개인정보보호전담기구 등을 통하여 회사 개인정보 처리방침의 이행사항 및 담당자의 준수여부를 확인하여 문제가 발견될 경우 즉시 수정하고 바로잡을 수 있도록 노력하고 있습니다. 단, 이용자 본인의 부주의나 인터넷상의 문제로 ID, 비밀번호 등 개인정보가 유출되어 발생한 문제에 대해 회사는 일체의 책임을 지지 않습니다.\n개인정보 보호책임자 및 연락처  회사는 개인정보에 대한 의견수렴 및 불만처리를 담당하는 개인정보 보호책임자를 지정하고 있습니다. 귀하께서는 회사의 서비스를 이용하시며 발생하는 모든 개인정보보호 관련 민원을 개인정보 보호책임자의 연락처로 신고하실 수 있습니다. 회사는 이용자들의 신고사항에 대해 신속하게 충분한 답변을 드릴 것입니다.  개인정보 보호책임자 이름: 박수지\n 소속/직위: 엔에이치엔아카데미 주식회사/책임 이메일: hello@nhnacademy.com 전화번호: 031-8038-3159  기타 개인정보침해에 대한 신고나 상담이 필요하신 경우에는 아래 기관에 문의하시기 바랍니다.\n 개인정보침해신고센터 (https://privacy.kisa.or.kr, 국번없이 118) 대검찰청 사이버수사과 (https://www.spo.go.kr, 국번없이 1301) 경찰청 사이버수사국 (https://ecrm.cyber.go.kr, 국번없이 182)  기타 회사가 제공하는 서비스에 링크되어 있는 웹페이지들이 개인정보를 수집하는 행위에 대해서는 본 \u0026ldquo;개인정보 처리방침\u0026quot;이 적용되지 않음을 알려 드립니다.\n고지의 의무 현 개인정보 처리방침의 내용 추가, 삭제 및 수정이 있을 시에는 개정 최소 7일전부터 홈페이지의 \u0026ldquo;공지사항\u0026rdquo; 등을 통해 고지할 것입니다. 다만, 이용자 권리의 중대한 변경이 있을 경우에는 최소 30일 전에 고지합니다.\n시행일자: 2021년 11월 01일\n","date":1530140400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652196813,"objectID":"18d05a63a1c8d7ed973cc51838494e41","permalink":"https://nhnacademy.github.io/privacy/","publishdate":"2018-06-28T00:00:00+01:00","relpermalink":"/privacy/","section":"","summary":"엔에이치엔아카데미 주식회사(이사 \u0026ldquo;회사\u0026quot","tags":null,"title":"개인정보처리방침","type":"page"},{"authors":null,"categories":null,"content":" NHN 아카데미의 부트캠프 과정은 환불 규정 내 오프라인 교육 서비스 규정을 적용합니다. 교육생은 언제든지 수강을 철회하거나 이용계약의 해제·해지를 할 수 있습니다. 수강철회, 이용계약해제·해지는 교육생이 전화, 전자우편 등으로 NHN ACADEMY(이하 \u0026ldquo;회사\u0026rdquo;)에 그 의사를 표시하여 신청할 수 있으며, \u0026ldquo;회사\u0026quot;는 지체없이 이에 대해 회신하고 규정에 따라 환불 등의 조치를 취합니다. \u0026ldquo;회사\u0026quot;는 원칙적으로 다음과 같은 환불 규정을 적용합니다.   환불 규정 - 사유별 환불 금액 안내 --     구분 환불사유 발생일 환불금액     오프라인 교육서비스   “회사”의 사정으로 환불하는 경우  교육 서비스를 제공할 수 없게 된 날   이미 납부한 수강료를 일할 계산한 금액    교육생의 변심으로 환불하는 경우  교습기간이 1개월 이내인 경우   교습시작 전  이미 납부한 수강료의 전액   총 교습시간의 1/3 경과 전 이미 납부한 수강료의 2/3에 해당하는 금액    총 교습시간의 1/2 경과 전 이미 납부한 수강료의 1/2에 해당하는 금액   총 교습시간의 1/2 경과 후 반환하지 않음   교습기간이 1개월을 초과하는 경우 교습 시작 전 이미 납부한 수강료의 전액   교습 시작 후  반환사유가 발생한 해당 월의 반환대상 수강료(교습기간이 1개월 이내인 경우의 기준에 따라 산출한 금액을 말한다)와 나머지 월의 수강료의 전액을 합산한 금액    온라인 교육서비스 이미 납부한 수강료에서 이용대금(총 수강료 – (수강한 강좌의 1회차당 이용대금 * 기 이용회차))을 공제한 금액    비고 반환금액의 산정은 반환사유가 발생한 날까지 경과된 교습시간을 기준으로 한다.    \u0026ldquo;회사\u0026quot;는 교육생으로부터 수강철회, 이용계약의 해제·해지 의사표시를 받은날로부터 3영업일 이내에 대금의 결제와 동일한 방법으로 이를 환불하여야 하며, 동일한 방법으로 환불이 불가능할 때에는 이를 사전에 고지하여야 합니다. 다만, 외부적 사정에 의하여 환불이 지연되는 경우 \u0026ldquo;회사\u0026quot;는 지연에 대한 책임을 지지 않습니다  ","date":1530140400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652196828,"objectID":"2c30154ffeea02239bccdf1dbc456f25","permalink":"https://nhnacademy.github.io/refund/","publishdate":"2018-06-28T00:00:00+01:00","relpermalink":"/refund/","section":"","summary":"NHN 아카데미의 부트캠프 과정은 환불 규정 내 오프라인 교육 서비스 규정을","tags":null,"title":"환불 규정","type":"page"},{"authors":null,"categories":null,"content":" Theory Into Practice의 줄임말입니다. 이론을 실무에 쓸 수 있도록 돕는데 목표를 둡니다. 간추리면 아래와 같습니다.  약한 TIP  교육 과정이나 교안이 없습니다. 4~5명 정도 모여서 함께 문제를 푸는 것이 학습 과정입니다. 문제를 이해하고 해답을 스스로 찾는 과정에서 학습이 이루어집니다. 문제를 푸는 데 필요한 기초는 각자가 알아서 합니다. 교사는 모임별 토론식 동료 학습에 가능한 끼어들지 않습니다. 교사는 문제를 내거나 자료를 전달합니다. 교사는 학습자나 학습자 모임의 학습 경로나 방법을 상담하고 지도합니다.  강한 TIP  약한 TIP을 따릅니다. 모든 문제는 연결됩니다.  한 문제의 답은 다른 문제의 입력입니다. 여러 문제의 답을 조립하면 큰 문제의 입력이 됩니다.    역사  1999년에 개발하기 시작해서 2003년에 초판을 완성했습니다. 미취업자를 모집하여 소프트웨어 기술 전문 직업인을 훈련하는 과정에서, 전산학 기초가 없어도 되는 단기 소모성 일자리와 인력을 양산하는 문제를 줄이려고, (그때는 드물었던) 1년 종일 훈련 프로그램을 설계하고, 그 속에 전산학 기초를 실무에 쓸 수 있도록 녹여 넣으려는 동기에서 시작되었습니다. 초판을 완성할 즈음에 IT 인력 양성 사업 열기가 식고 관련 사업도 쇠퇴기를 맞이하여 직무 연수 과정에 적용해보는 기회를 다시 얻지 못했습니다. 2003년 이후, 공학 문제 해결 능력을 기르는 데 목표를 두고, MPS(Multi-paradigm Problem Solving)란 이름으로, 컴퓨터 프로그래밍을 교양으로 가르치는 프로그램을 TIP 방식으로 개발하여 5년 넘게 운영하였습니다. MPS는 MIT SICP 6.001과 HTDP를 TIP 방식으로 재구성하면서 시작하였으나 뒤에는 데이터를 읽고 해석하는 힘을 길러주기 위하여 스프레드시트 패러다임을 도입하기도 하였습니다.  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656088342,"objectID":"42112c67385a62a594acf17b4cd59f2b","permalink":"https://nhnacademy.github.io/archive/tip/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/archive/tip/","section":"archive","summary":"이론을 실무에 쓸 수 있도록 돕는데 목표를 둡니다.","tags":null,"title":"TIP","type":"book"}]