[{"authors":null,"categories":null,"content":"   Table of Contents  준비 무엇을 배우나 프로그램 세부 과정 교수 FAQs    준비 아카데미 경남 캠퍼스 1기 웹 서비스 과정 수강생의 학기 시작 전 방학 숙제로 내는 문제입니다. 특별히 기술 면접과 코딩 테스트에 나왔던 문제의 답도 엿볼 수 있도록 꾸민 특별판입니다. 프로그램 짜는 재미와 데이터 읽는 기쁨을 누리는 시간이 되기를 바랍니다.\nQuiz #1:\n 이름: 과정: 날짜:  Quiz #2: 글을 읽고 프로그램이 잘 돌아가도록 코드 속의 \u0026hellip;을 채우세요.\n무엇을 배우나  Fundamental Python programming skills Statistical concepts and how to apply them in practice Gain experience with the Scikit, including data visualization  프로그램 System Simulation Programming Styles in Stream Paradigm, NHN Theory Into Practice Series, Python Edition, 2022\n세부 과정  계산 절차를 간추리는 방법  2022년 아카데미 경남 캠퍼스 1기 기술 면접 1번 문제. 프로그램 짜는 틀이 잡혔는지 알아보려고 낸 문제다. 정답을 맞힌 사람이 없어서 한 번 더 풀어보라고 다시 문제지의 1번 문제로 내놓았다. 이 번에는 의도를 알아차리기 쉽도록 코드 틀을 마련하여 채우는 방식으로 꾸몄다. 이 문제는 문제지가 끌고 가려는 이야기 흐름에서 조금 벗어난 시작이다. 하지만 이 문제지 자체가 2022년 경남 아카데미 1기의 학기 시작 전 공부 거리로 나가는 것이라 정답지를 대신하는 것이라 봐도 좋다.   끝없는 계산 순열 곧 iterator를 써서 계산을 간추리면 얻을 수 있는 장점이 또 하나 있습니다. 데이터를 쓰는 코드에서 계산이 언제 끝나는지를 굳이 드러내지 않아도 됩니다. 데이터 열거의 시작과 끝을 모두 iterator 속에 간추릴 수 있기 때문입니다. 따라서 iterator를 쓰면 끝나는 계산과 끝없는 계산을 굳이 구분하지 않고 한 가지 계산으로 간추릴 수 있습니다.   몬테카를로 시뮬레이션 몬테카를로 방법은 여러 분야에서 시뮬레이션을 하는데 널리 쓰입니다. 일단 끝없는 순열은 쓰지 않고 계산 절차만 간추려 봅니다. 참 거짓을 답하는 함수(실험)를 n 번 시행하고 참이 나온 횟수를 n으로 나눕니다.   참고 자료   교수 Academy FAQs Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n  Begin the course   ","date":1645056e3,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1645056e3,"objectID":"d4a21b4973735637349ff59ba40535dc","permalink":"https://nhnacademy.github.io/courses/monte-carlo/","publishdate":"2022-02-17T00:00:00Z","relpermalink":"/courses/monte-carlo/","section":"courses","summary":"System Simulation Programming Styles in Stream Paradigm, NHN Theory Into Practice Series, Python Edition","tags":null,"title":"Monte Carlo Methods","type":"book"},{"authors":null,"categories":null,"content":"   Table of Contents  What you will learn Program overview Courses in this program Meet your instructor FAQs    What you will learn  Fundamental Python programming skills Statistical concepts and how to apply them in practice Gain experience with the Scikit, including data visualization with Plotly and data wrangling with Pandas  Program overview The demand for skilled data science practitioners is rapidly growing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi.\nCourses in this program  Python basics Build a foundation in Python.   Visualization Learn how to visualize data with Plotly.   Statistics Introduction to statistics for data science.   Meet your instructor Academy FAQs Are there prerequisites? There are no prerequisites for the first course.\n How often do the courses run? Continuously, at your own pace.\n  Begin the course   ","date":1611446400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611446400,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"https://nhnacademy.github.io/courses/example/","publishdate":"2021-01-24T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"An example of using Wowchemy's Book layout for publishing online courses.","tags":null,"title":"📊 Learn Data Science","type":"book"},{"authors":null,"categories":null,"content":"The FREE, Hugo-based open source website builder and template trusted by 500,000+ sites.\nBuild anything with widgets - from landing pages, knowledge bases, and courses to academic resumés, conferences, and tech blogs.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"e4a510b5bba9bd5ecbcb73b85db78226","permalink":"https://nhnacademy.github.io/widgets-for-home/hero/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/hero/","section":"widgets-for-home","summary":"The FREE, Hugo-based open source website builder and template trusted by 500,000+ sites. Build anything with widgets - from landing pages, knowledge bases, and courses to academic res","tags":null,"title":"Hugo Academic Theme","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"Welcome to the demo of the academic resumé template for Wowchemy, the Website Builder for Hugo.\nExplore similar templates\nOver 500,000 Amazing Websites have Already Been Built with Wowchemy\nJoin the Most Empowered Hugo Community\n This homepage section is an example of adding elements to the Blank widget.\nBackgrounds can be applied to any section. Here, the background option is set give an image parallax effect.\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"90cc2ccaed44b9e2b5e2eb341240b274","permalink":"https://nhnacademy.github.io/widgets-for-home/demo/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/demo/","section":"widgets-for-home","summary":"Welcome to the demo of the academic resumé template for Wowchemy, the Website Builder for Hugo.\nExplore similar templates\nOver 500,000 Amazing Websites have Already Been Built with Wowchemy\nJoin the Most Empowered Hugo Community","tags":null,"title":"Hugo Academic Theme Demo","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"Build a foundation in Python.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz What is the difference between lists and tuples? Lists\n Lists are mutable - they can be changed Slower than tuples Syntax: a_list = [1, 2.0, 'Hello world']  Tuples\n Tuples are immutable - they can\u0026rsquo;t be changed Tuples are faster than lists Syntax: a_tuple = (1, 2.0, 'Hello world')   Is Python case-sensitive? Yes\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"17a31b92253d299002593b7491eedeea","permalink":"https://nhnacademy.github.io/courses/example/python/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/python/","section":"courses","summary":"Build a foundation in Python.\n","tags":null,"title":"Python basics","type":"book"},{"authors":null,"categories":null,"content":" 2022년 아카데미 경남 캠퍼스 1기 기술 면접 1번 문제. 프로그램 짜는 틀이 잡혔는지 알아보려고 낸 문제다. 정답을 맞힌 사람이 없어서 한 번 더 풀어보라고 다시 문제지의 1번 문제로 내놓았다. 이 번에는 의도를 알아차리기 쉽도록 코드 틀을 마련하여 채우는 방식으로 꾸몄다. 이 문제는 문제지가 끌고 가려는 이야기 흐름에서 조금 벗어난 시작이다. 하지만 이 문제지 자체가 2022년 경남 아카데미 1기의 학기 시작 전 공부 거리로 나가는 것이라 정답지를 대신하는 것이라 봐도 좋다.     1-2 hours per week, for 8 weeks\n프로그램을 잘 짜려면 얼개가 튼튼해야 합니다. 아래는 프로그램 짜는 법을 처음 배우기 시작할 때 누구나 흔히 풀어보는 문제입니다.1 하지만 프로그램 짜는 기본기 곧 컴퓨터로 계산하는 절차를 간추리는 연습을 꾸준히 하는데 이보다 알맞은 문제도 드뭅니다. 제대로 간추리는 방법을 알면 단순한 코드의 품질도 몰라보게 달라집니다.\n프로그램 짜는 기본기를 잘 갖추고 있는지 점검하기 위해서 아래 세 함수의 같고 다른 점을 찾아서 계산 절차를 간추려 보기로 합니다.\n a에서 b까지 정수를 모두 더하는 함수 a에서 b까지 정수를 모두 곱하는 함수 마구잡이 수를 모두 곱하거나 더할 수 있는 함수  값을 차례대로 늘어놓은 순열(sequence) xs의 값을 이항 연산자 glue로 누적하는 함수 fold를 정의합니다. 인자 identity는 glue 연산자의 항등원(identity element)이거나 초기 값일 수 있습니다. 2\ndef fold( identity, glue, xs): result = identity for x in xs: result = glue( result, x ) return result  1번 문제의 답이 되는 함수를 sum이라고 합시다. sum과 fold의 계산 절차가 거의 같다는 것을 알아차리는 것이 중요합니다. 계산 절차를 간추려낸 fold가 있기 때문에 다른 점만 인자로 건네주면 순열 xs로부터 차례대로 열거되는 모든 수의 합을 구하는 함수 sum을 정의할 수 있습니다. sum 함수를 def 키워드로 정의하지 않고 lambda 연산자의 값으로 정의할 수 있다는 점도 눈여겨 봅시다.\nsum = lambda xs: fold( 0, lambda x, y: x + y, xs )  sum으로 1번 문제를 푸는 sum_integers를 정의합니다.\nsum_integers = lambda a, b: sum( range( a, b + 1 ) ) print( sum_integers( 1, 10 ) )  55  마찬가지로 fold를 써서 순열 xs의 모든 수를 곱하는 함수 product와 2번 문제를 푸는 product_integers을 정의합니다.\nproduct = lambda xs: fold( 1, lambda x, y: x * y, xs ) product_integers = lambda a, b: product( range( a, b + 1 ) ) print( product_integers( 1, 10 ) )  3628800  fold는 마구잡이 수열을 모두 더하거나 곱하는 3번 문제에도 그대로 쓸 수 있습니다.\nfrom random import random n = 20 print( sum( random() for _ in range( 0, n ) ) ) print( product( random() for _ in range( 0, n ) ) )  10.00683497691481 5.031436054307361e-12  fold처럼 되쓰임새가 높은 함수를 정의할 수 있는 이유는 순열 xs가 데이터를 만드는 코드(계산 절차)와 데이터를 쓰는 코드를 서로 떼어 놓았기 때문입니다. 여러 프로그래밍 언어에서 이런 얼개로 코드를 짜맞추는 방식을 두고 iterator 패턴이라고 하고 xs를 iterator (enumerator, list)라고 합니다.\n  Harold Abelson, Gerald Jay Sussman, Julie Sussman, \u0026ldquo;Structure and Interpretation of Computer Programs\u0026rdquo;, Chapter 2.2.1,3 (2nd ed.), https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-4.html#%_toc_%_sec_2.2.1 1996\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 항등원과 함께 이항 연산자 glue의 결합 법칙도 중요하다. 계산의 방향에 따라 결과가 다르기 때문이다. 덧셈, 곱셈 말고 뺄셈, 나눗셈이 들어가는 경우를 생각해보면 된다. 이 때문에 fold-left, fold-right로 어느 쪽으로 연산 결과를 쌓아가는지 구분지어 정의하는 편이 더 나을 수도 있다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"88e11ff55bbe7e9ef7bb1c0d07f15520","permalink":"https://nhnacademy.github.io/courses/monte-carlo/procedural_abstraction/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/monte-carlo/procedural_abstraction/","section":"courses","summary":" 2022년 아카데미 경남 캠퍼스 1기 기술 면접 1번 문제. 프로그램 짜는 틀이 잡혔는지 알아보려고 낸 문제다. 정답을 맞힌 사람이 없어서 한 번 더 풀어보라고 다시 문제지의 1번 문제로 내놓았다. 이 번에는 의도를 알아차리기 쉽도록 코드 틀을 마련하여 채우는 방식으로 꾸몄다. 이 문제는 문제지가 끌고 가려는 이야기 흐름에서 조금 벗어난 시작이다. 하지만 이 문제지 자체가 2022년 경남 아카데미 1기의 학기 시작 전 공부 거리로 나가는 것이라 정답지를 대신하는 것이라 봐도 좋다.  ","tags":null,"title":"계산 절차를 간추리는 방법","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"ad70b65fa80948f5a03b1dbcd14772af","permalink":"https://nhnacademy.github.io/widgets-for-home/about/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/about/","section":"widgets-for-home","summary":"","tags":null,"title":"Biography","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"Learn how to visualize data with Plotly.\n  1-2 hours per week, for 8 weeks\nLearn   Quiz When is a heatmap useful? Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n Write Plotly code to render a bar chart import plotly.express as px data_canada = px.data.gapminder().query(\u0026quot;country == 'Canada'\u0026quot;) fig = px.bar(data_canada, x='year', y='pop') fig.show()  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"1b341b3479c8c6b1f807553b77e21b7c","permalink":"https://nhnacademy.github.io/courses/example/visualization/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/visualization/","section":"courses","summary":"Learn how to visualize data with Plotly.\n","tags":null,"title":"Visualization","type":"book"},{"authors":null,"categories":null,"content":"순열 곧 iterator를 써서 계산을 간추리면 얻을 수 있는 장점이 또 하나 있습니다. 데이터를 쓰는 코드에서 계산이 언제 끝나는지를 굳이 드러내지 않아도 됩니다. 데이터 열거의 시작과 끝을 모두 iterator 속에 간추릴 수 있기 때문입니다. 따라서 iterator를 쓰면 끝나는 계산과 끝없는 계산을 굳이 구분하지 않고 한 가지 계산으로 간추릴 수 있습니다.\n  1-2 hours per week, for 8 weeks\n스트림 값 또는 데이터들이 언제 얼마나 쓰일지를 미리 알 수 없는 경우가 많습니다. 또, 이를테면 마우스로 클릭하는 좌표 값을 연이어 받아서 무언가를 하는 프로그램을 짜는 경우처럼 미리 데이터를 만들어 둔다는 게 아무런 의미가 없을 때도 있습니다. 이럴 때 데이터를 미리 만들어 저장해 두지 않고, (필요할 때 데이터를 만들어 낼 수 있도록) 계산하는 방법 그 자체만 따로 솎아낼 수 있다면 계산 자원을 선점하는 낭비를 줄이고 계산 방법 또는 문제를 푸는 방법을 적은 코드와 계산 또는 문제 풀이를 적은 코드를 분리하여 코드의 되쓰임새를 한층 더 끌어올릴 수 있습니다.\n데이터 만드는 계산을 데이터를 쓰는 코드로부터 완전히 격리하기 위해서 널리 쓰는 방법 가운데 하나는 지연 계산법(delayed evaluation)을 써서 순열을 표현하는 방법입니다. 스트림(Stream)이라고 불리기도 합니다.1\n먼저 계산을 미루는 연산이 필요합니다.\ndef delay( v ): return lambda: v  반대로 계산을 하도록 만드는 연산도 필요합니다.\ndef force( v ): return v()  새로운 스트림을 만들려면 빈 스트림을 표현하는 연산과 스트림에 새로운 원소를 덧붙이는 연산이 필요합니다. 이런 연산들을 아울러 constructor라고 합니다. xs를 delay 연산으로 감싸서 계산을 뒤로 미룹니다.\nEmptyStream = None def stream(x, y): # const_stream return ( x, delay( y ) )  스트림의 부품을 머리와 꼬리로 구분 짓는 연산자도 필요합니다. 이런 연산들을 아울러 selector라고 합니다. 꼬리를 떼어낼 때 계산이 일어나도록 force 연산을 씁니다.\ndef head( stream ): (x, _) = stream return x def tail( stream ): (_, xs) = stream return force( xs )  스트림 연산으로 a에서 b에 이르는 정수의 순열을 표현합니다.\ndef integers( a, b ): if a \u0026gt; b: return EmptyStream return stream( a, integers( a + 1, b ) )  스트림 원소마다 함수 f를 적용하는 절차를 간추려 foreach로 정의합니다.\ndef foreach( f, stream ): if stream == EmptyStream: return None else: f( head( stream ) ) return foreach( f, tail( stream ) )  스트림 원소를 보는데 print()를 쓰지는 못합니다. 스트림 원소를 차례대로 찍은 절차를 적는데 foreach를 써 봅니다.\ndef print_stream( stream ): foreach( lambda x: print( x, end=' ' ), stream ) print() print_stream( integers( 1, 10 ) )  1 2 3 4 5 6 7 8 9 10  끝나는 정수열은 잘 찍힙니만, 끝없는 정수열을 늘어놓는 데 스트림 연산을 쓸 수 있을까요?\ndef integers_from( n ): return stream( n, integers_from( n + 1 ) ) print_stream( integers_from( 1 ) )  스택이 넘쳤다고 투덜대면서 프로그램이 멈춥니다.\nRecursionError Traceback (most recent call last) ... [... skipping similar frames: integers_from at line 2 (2970 times)] RecursionError: maximum recursion depth exceeded  계산 방법에는 잘못이 없습니다. 하지만 계산 결과는 틀렸습니다.2\nPython 같은 언어에서는 이런 아이디어를 그대로 가져다 쓸 수 없습니다. Java, Python 같은 언어에서는 list, array 같이 끝나는 순열(sequence)을 끝없는 순열과 구분하지 않고 하나로 간추려 낼 수 없습니다. 그 때문에 빚어지는 프로그램 설계 문제를 줄이고자 표현력의 결핍을 막는 방편으로 iterator라는 패턴 또는 비슷한 이름의 부품들을 씁니다.3\n대안을 찾아서 언어마다 표현법이 다르지만 iterator로 끝없는 데이터 목록을 표현할 수 있습니다.\n정수 n부터 끝없이 정수를 열거하는 방법을 표현합니다.\ndef integers_from( n ): while True: yield( n ) n += 1  범위를 지정하여 열거하는 연산은 이미 있습니다.\nprint( range(1, 11) )  range(1, 11)  이로부터 iterator를 얻어내는 연산도 있습니다.\nprint( iter(range(1, 11)))  \u0026lt;range_iterator object at 0x7fb888fd5a80\u0026gt;  연산 결과를 찍어봐야 정수열을 볼 수는 없습니다. 두 연산 모두 계산을 하지 않기 때문입니다. 끝없는 계산의 순열을 표현하지만 때로는 계산을 하도록 만들어서 그 값을 찍는 연산도 필요합니다.\ndef print_iterator( xs ): for x in xs: print(x, end=' ') print() print_iterator( iter(range(1, 11)))  1 2 3 4 5 6 7 8 9 10  하지만 끝없는 연산을 찍으려하면 그 또한 끝나지 않습니다. 끝없는 계산을 n번 계산으로 끝내는 연산이 필요합니다.\ndef finite( n, xs ): for i in range(1, n+1): yield( next(xs) ) print_iterator( finite( 100, integers_from( 1 ) ) )  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100  finite는 여전히 계산을 미룹니다. 계산이 일어나도록 만드는 간편 함수가 있으면 편리합니다.\n계산 결과를 목록(list)에 저장하면서 비로소 계산을 하게됩니다.\ndef take( n, xs ): return list( finite( n, xs ) )  피보나치 수 10개를 곧바로 찍을 수 있습니다.\ndef fibonacci_numbers(): a, b = 0, 1 while True: yield( a ) a, b = b, a + b print( take( 10, fibonacci_numbers() ) )  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]  끝없는 짝수열에서 10개만 찍는 코드를 씁니다. 그 과정에서 되쓰임새가 또렷한 계산 절차를 함수 세 개로 나누어 간추렸습니다.\ndef filter( istrue, xs ): for x in xs: if istrue( x ): yield( x ) def isdivisible( x, y ): return x % y == 0 def iseven( x ): return isdivisible( x, 2 ) print_iterator( take( 10, filter( iseven, integers_from( 1 ) ) ) )  2 4 6 8 10 12 14 16 18 20  n번째 계산 결과만 출력하는 연산이 있으면 쓸모가 많습니다. 이를 테면 fold, sum을 iterator 패턴에 맞게 다시 정의하고 10까지 더한 값을 구한다고 하면 계산 과정에서 얻은 값을 저장할 필요가 없습니다.\ndef index( n, xs ): for x in xs: if n == 0: return x n -= 1 def fold( glue, identity, xs ): result = identity for x in xs: yield( result ) result = glue( result, x ) def sum( xs ): return fold( lambda x, y: x + y, 0, xs ) print( index( 10, sum( integers_from( 1 ) ) ) )  55  끝없는 계산은 끝없이 찍힙니다.\ndef map( f, xs ): for x in xs: yield( f( x ) ) # 1 2 ... infinite! print_iterator( map( lambda x: x + 1, integers_from(0)))  그런데 이런 연산을 어디다 쓸 수 있을까요?\n  Harold Abelson, Gerald Jay Sussman, Julie Sussman, \u0026ldquo;Structure and Interpretation of Computer Programs\u0026rdquo;, Section 3.5.1 Streams Are Delayed Lists의 아이디어를 빌렸다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 왜 그럴까요? (귀띔: Applicative-order evaluation (eager evaluation, call-by-value와 비슷한) 방식으로 계산하는 언어는 다 마찬가지입니다. 프로그래밍 언어가 대개 이런 계산 방식을 따릅니다. 이런 언어에서는 새로운 제어 구조를 만들어 보태지 못합니다. 미리 만들어 놓은 것만 쓸 수 있어요. 이를 테면 if-then-else가 없다면 새로 만들어서 쓸 수 없습니다.) 함수(또는 프로시저)의 정의하는 식을 펼쳐서 인자로 건넨 식을 대치하기 전에, 인자에 대응한 식의 계산을 먼저 끝내는 방식을 두고 흔히 인자 먼저 계산법(applicative-order evaluation, eager evaluation)이라고 합니다. Call-by-value라는 인자 전달 방법(parameter-passing)과 비슷하게 생각해도 크게 무리는 없지만 꼼꼼히 따지고 들면 차이가 있으니 이 번 참에 공부해서 잘 분별해 두는 것도 좋습니다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Iterator를 만드는 데도 여러가지 기법이 있지만 여기서는 주로 (python 언어에서 generator라고하는) yield 연산으로 함수 내에서 값을 열거하는 방법을 쓰기로 한다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"3e7304350a0b6bbbf6c69d039f12e2e7","permalink":"https://nhnacademy.github.io/courses/monte-carlo/infinite/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/monte-carlo/infinite/","section":"courses","summary":"순열 곧 iterator를 써서 계산을 간추리면 얻을 수 있는 장점이 또 하나 있습니다. 데이터를 쓰는 코드에서 계산이 언제 끝나는지를 굳이 드러내지 않아도 됩니다. 데이터 열거의 시작과 끝을 모두 iterator 속에 간추릴 수 있기 때문입니다. 따라서 iterator를 쓰면 끝나는 계산과 끝없는 계산을 굳이 구분하지 않고 한 가지 계산으로 간추릴 수 있습니다.\n","tags":null,"title":"끝없는 계산","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7d8f099636c549aeade6640b85f82aab","permalink":"https://nhnacademy.github.io/widgets-for-home/skills/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/skills/","section":"widgets-for-home","summary":"","tags":null,"title":"Skills","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"Introduction to statistics for data science.\n  1-2 hours per week, for 8 weeks\nLearn The general form of the normal probability density function is:\n$$ f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi} } e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} $$\n The parameter $\\mu$ is the mean or expectation of the distribution. $\\sigma$ is its standard deviation. The variance of the distribution is $\\sigma^{2}$.   Quiz What is the parameter $\\mu$? The parameter $\\mu$ is the mean or expectation of the distribution.\n","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"6f4078728d71b1b791d39f218bf2bdb1","permalink":"https://nhnacademy.github.io/courses/example/stats/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/example/stats/","section":"courses","summary":"Introduction to statistics for data science.\n","tags":null,"title":"Statistics","type":"book"},{"authors":null,"categories":null,"content":"몬테카를로 방법은 여러 분야에서 시뮬레이션을 하는데 널리 쓰입니다. 일단 끝없는 순열은 쓰지 않고 계산 절차만 간추려 봅니다.\n참 거짓을 답하는 함수(실험)를 n 번 시행하고 참이 나온 횟수를 n으로 나눕니다.\n  1-2 hours per week, for 8 weeks\ndef monte_carlo( n_trials, truths ): return sum( [ truths() for i in range( n_trials+1 ) ] ) / n_trials  어림 값 몬테카를로 방식으로 ${\\pi}$ 값을 어림잡을 수 있습니다. 두 마구잡이 수가 서로 소인지 알아보는 함수를 만듭니다.\nfrom math import gcd, sqrt from random import randint def dirichlet_test(): return gcd( randint(1, 1000), randint(1, 1000) ) == 1  몬테카를로 방식으로 값을 구합니다.\ndef quess_pi( n_trials ): return sqrt( 6 / monte_carlo( n_trials, dirichlet_test ) ) print( quess_pi( 100_000 ))  3.139623287689948  십만 번 정도 시행하면 ${\\pi}$ 값에 다가갑니다.\n끝없는 실험 몬테카를로 실험에 iterator 기법을 적용해 봅니다.\n먼저 어떤 함수의 계산 값을 끝없이 늘어놓은 함수를 만듭니다.\ndef repeat( f ): while True: yield( f() )  from numpy.random import randint, random, normal print_iterator( take( 10, repeat( random ) ) )  0.9280550225904395 0.22280097961036138 0.10318922203641656 0.5838716457253749 0.03550028920191295 0.36444575313103367 0.3816809748705672 0.326481870159794 0.4301836750394781 0.24527212163771261  몬테카를로 iterator를 정의합니다. 오로지 계산 방법 그 자체만을 있는 그대로 표현한 코드를 쓸 수 있습니다. 계산 시간(횟수)와 계산 공간 문제 곧 계산 자원 문제를 계산 방법으로부터 격리할 수 있습니다.\ndef monte_carlo( experiment ): n, sums = 0, sum( repeat( experiment ) ) for s in sums: n = n + 1 yield( s / n )  $\\pi$ 값으로 끝없이 수렴하는 수열을 표현할 수 있습니다.\nfrom math import gcd, sqrt pi = map( lambda x: 0 if x == 0 else sqrt( 6 / x ), monte_carlo( dirichlet_test ) )  끝없는 수열 pi에서 10만 번째 값만 뽑습니다.\nprint( index( 100_000, pi) )  3.1405936558730163  응용 Iterator 패턴과 몬테카를로 방법을 실제 어떻게 쓰는지 그 장단점을 또렷이 드러내는 본보기로 약재와 약물의 관계를 모의 실험하는 예제를 다룹니다. 특히 끝없는 이어지는 데이터를 순열(스트림)로 간추리는 기법은 시계열 데이터 시뮬레이션을 다루는 데 잘 들어맞습니다. 특히 이동 통신 환경에서 통신망 저편에서 흘러 들어오는 수백 개의 센서 데이터 스트림을 떠올려 보면 어렵지 않게 끝없는 데이터 순열을 떠올릴 수 있습니다.1\n확률 분포 시뮬레이션에서는 가짜(의사) 마구잡이 수(난수)를 정해진 분포에 따라 늘어 놓은 일이 필요합니다. repeat 함수로 널리 쓰이는 이항, 균등, 정상 분포 함수를 준비합니다.2\ndef binomial_distribution( success_ratio ): if success_ratio \u0026lt; 0 or success_ratio \u0026gt; 1: raise ValueError( \u0026quot;binomial_distribution: \u0026quot; + \u0026quot;success ratio is out of range ( 0 to 1 only )\u0026quot; ) return repeat( lambda : random() \u0026lt;= success_ratio ) # binomial_distribution( 1.2 ) # error! # print_iterator( take( 10, binomial_distribution( 0.5 ) ) ) def discrete_uniform_distribution( low, high ): return repeat( lambda: randint( low, high + 1 ) ) # print_iterator( take( 10, discrete_uniform_distribution( 1, 4 ) ) ) def normal_distribution( mean, standard_deviation ): return repeat( lambda: normal( mean, standard_deviation))  약효 시뮬레이션 확률 분포와 몬테카를로 방법으로 재밌는 실험을 할 수 있습니다. 돌림병을 치료하는데 꼭 필요한 약초가 있다고 합시다.3\n좋은 약초를 발견할 확률이 herb_ratio일 때 마구잡이 수를 뽑아 이 값과 크기를 비교하면 참 거짓을 정할 수 있습니다. 이를 연속 시행하면 참 거짓의 이항 분포를 얻을 수 있습니다. 좋은 약초 발견 가능성을 이항 분포로 뽑아냅니다.\nherb_ratio = 0.2 herb_availablities = binomial_distribution(herb_ratio)  약초의 품질을 넷으로 나눕니다.\nExcellent, Good, Marginal, Poor = 0, 1, 2, 3  좋은 약초는 Excellent 품질. 좋은 약초가 없으면 다른 약초를 여럿 섞어서 대신 쓰는데 그 품질이 고르지 않습니다. 좋은 약초가 있느냐 없느냐에 따른 약초의 효과를 어림잡는 함수를 만듭니다.\ndef guess_quality( qualities ): return lambda isavailable: Excellent if isavailable else next( qualities )  guess_quality가 함수를 값으로 내놓고 있다는 걸 눈여겨 보아야 합니다. 이런 표현을 쓰면 간결한 코드를 쓸 수 있습니다. 하지만 코드를 읽기 어렵게 만들 수 있습니다.\n네 가지 품질 가운데 하나가 고르게 뽑히도록 이산 균등 분포를 씁니다.\nherb_qualities = map( guess_quality( discrete_uniform_distribution( Excellent, Poor ) ), herb_availablities )  약초 품질에 따라 약물의 효과가 갈리지만 약초 품질이 고르지 않으므로 약물의 효과도 편차가 있는 것이 자연스럽습니다. 실감나는 시뮬레이션을 위해서 약물 효과를 네 가지로 분류하되 그 또한 마구잡이로 약효에 편차가 생기도록 네 가지 정상 분포로 표현합니다.\neffect_distributions_by_quality = [ normal_distribution( mean, standard_deviation ) for ( mean, standard_deviation ) in [ ( 90, 10 ), ( 80, 20 ), ( 50, 30 ), ( 30, 40 ) ]]  약초의 품질에 따른 약물 효과를 마구잡이로 뽑는 함수를 만듭니다. 약물 효과는 0에서 100사이 값이므로 이 범위를 넘는 값을 잘라냅니다.\ndef quess_effect_from( quality ): guess = next( effect_distributions_by_quality [ quality ] ) if guess \u0026lt; 0: return 0 elif guess \u0026gt; 100: return 100 return guess  약초의 품질로부터 약효를 끝없이 계산하는 순열 effects를 정의합니다.\neffects = map( quess_effect_from, herb_qualities )  계산 계산이 시작되려면 시행 횟수를 정해서 약물 효과 추정치를 뽑아내고 계산 결과를 목록에 저장해야 합니다. 계산하는 방법만 적었지 실제 계산을 하지는 않았기 때문에 계산 방식을 저장해둔 계산 환경 자원을 빼면 계산하는 과정에서 필요한 계산 자원이 조금도 소비되지 않았다는 사실을 정확히 인식하고 이해하는 것이 중요합니다. 계산하는 방법과 계산을 나누면 어떤 방식으로 프로그램을 설계할 수 있는지가 잘 드러나 있습니다.\ntake로 7000번 계산을 합니다. 끝없는 계산 순열 effect가 7000번으로 끝나도록 만든 뒤에 계산 결과를 순서대로 하나씩 목록에 저장합니다. 계산 순열 effects에는 다른 계산 순열 herb_qualities가 연결되어 있고 이는 다시 herb_avaliablities로 연결되어 있기 때문에 한 계산이 다른 계산으로 이어집니다.\nnumber_of_trials = 7000 neffects = take( number_of_trials, effects )  약물 효과 시뮬레이션한 결과를 막대 그래프로 표현할 수 있습니다.\nimport matplotlib.pyplot as plot plot.hist( neffects, rwidth=0.9 ) plot.xlabel(\u0026quot;Potion effect\u0026quot;) plot.ylabel(\u0026quot;# Samples\u0026quot;) plot.grid() plot.show()     상태가 필요해 약효 모의 실험은 잘 되지만 실험은 결과 만큼 과정에 대한 정보도 중요합니다. 계산 과정에 쓴 데이터들 곧 약초와 품질, 그에 따른 약물의 품질, 그리고 약효에 대한 데이터가 될 수 있는 한 상세하게 보고서로 나와야 쓸모있는 실험이 됩니다. Iterator를 쓰는 코드 얼개를 조금도 망가뜨리지 않고 필요한 정보만 저장했다가 꺼내보는 방법이 필요합니다.\n계산과 저장을 가능한 하지 않고 미루는 방식과 계산 과정에서 얻은 정보를 적절히 저장하는 두 가지 다른 방식을 한 데 엮어 쓰는 본보기가 됩니다. 문제는 그에 맞는 풀이 방법이 제 각기 다를 수 있습니다. 굳이 한 가지 방법만을 고집할 필요가 없습니다.\n몬테카를로 클래스 Iterator로 동작하는 모듈을 만들 수 있습니다. iter, next 메소드를 구현하면 됩니다. 모듈을 만드는 __init__에서 모의 실험과 분포의 이름을 받습니다. 이렇게 만들면 인자로 받은 순열 experiments와 다를 바 없이 iterator처럼 값을 끝없이 늘어놓으면서도, __next__할 때마다 계산 과정에서 얻은 데이터 곧 횟수와 합을 저장하기 때문에 필요할 때 꺼내 쓸 수 있습니다.\nclass MonteCarlo: def __init__( self, experiments, name_of_experiment = \u0026quot;\u0026quot;, name_of_distribution = \u0026quot;\u0026quot; ): self.name_of_experiment = name_of_experiment self.experiments = experiments self.name_of_distribution = name_of_distribution self.number_of_trials = 0 self.sum = 0 def __iter__( self ): self.number_of_trials = 0 return self def __next__(self): outcome = next( self.experiments ) self.sum += outcome self.number_of_trials += 1; return outcome def mean( self ): if self.number_of_trials == 0: raise BaseException(\u0026quot;0 trials\u0026quot;) else: return self.sum / self.number_of_trials def report( self ): print( self.number_of_trials, self.name_of_experiment, \u0026quot;samples were taken by\u0026quot;, self.name_of_distribution ) print( \u0026quot;The mean was\u0026quot;, self.mean() )  함수로 만든 monte_carlo와 쓰임새가 같다는 것을 보이기 위해서 MonteCarlo 클래스로 $\\pi$ 값을 어림잡아 봅니다.\ndirichlet_test_experiments = MonteCarlo( repeat( dirichlet_test ), \u0026quot;dirichlet_test\u0026quot; ) take( 100_1000, dirichlet_test_experiments ) print( sqrt( 6 / dirichlet_test_experiments.mean() ) )  3.1411359422489764  변해도 되는 것과 변하지 않는 것 코드 구조가 조금도 바뀌지 않았습니다. MonteCarlo 클래스로 모듈을 만들어 필요할 때마다 iterator에 덧 씌우는 코드 말고는 달라진 부분이 거의 없습니다. 하지만 이 번에는 단계별 정보를 저장할 준비가 되어 있습니다.\nherb_ratio = 0.2 herb_availablities = MonteCarlo(binomial_distribution(herb_ratio), \u0026quot;herb availabilties\u0026quot;, \u0026quot;binomial distribution\u0026quot;) Excellent, Good, Marginal, Poor = 0, 1, 2, 3 def guess_quality( qualities ): return lambda isavailable: Excellent if isavailable else next( qualities ) herb_qualities = MonteCarlo( map( guess_quality( discrete_uniform_distribution( Excellent, Poor ) ), herb_availablities ), \u0026quot;potion quality\u0026quot;, \u0026quot;discrete uniform distribution\u0026quot; ) effect_distributions_by_quality = [ MonteCarlo( normal_distribution( mean, standard_deviation ), quality + \u0026quot; effect\u0026quot;, \u0026quot;normal distribution\u0026quot;) for ( quality, mean, standard_deviation ) in [ ( \u0026quot;excellent\u0026quot;, 90, 10 ), ( \u0026quot;good\u0026quot;, 80, 20 ), ( \u0026quot;marginal\u0026quot;, 50, 30 ), ( \u0026quot;poor\u0026quot;, 30, 40 ) ]] def quess_effect_from( quality ): guess = next( effect_distributions_by_quality [ quality ] ) if guess \u0026lt; 0: return 0 elif guess \u0026gt; 100: return 100 return guess effects = map( quess_effect_from, herb_qualities ) number_of_trials = 7000 neffects = take( number_of_trials, effects )  모의 실험 보고서 모든 계산이 마무리되었으므로 계산 결과를 볼 수 있습니다. MonteCarlo 클래스가 없다면 계산 순열을 끝없이 늘어놓는 일과 계산 과정을 기록하는 일, 이 둘을 한 꾸러미로 묶어내기가 (언제나 그렇듯이 한 방법으로 다른 방법을 완전히 대체하는 할 수 있지만) 무척 번거롭습니다. 문제마다 알맞은 방법을 골라서 서로 잘 어울리도록 짜 맞추면 프로그램의 얼개가 아주 튼튼해집니다. 성능을 시험하고 고장난 곳을 찾아서 고치기에도 좋은 짜임새를 갖추게 됩니다.\n좋은 약초를 얻을 확률은 얼마나 될까요?\nprint( \u0026quot;Herb availability: \u0026quot;) herb_availablities.report() print()  Herb availability: 7000 herb availabilties samples were taken by binomial distribution The mean was 0.2012857142857143  좋은 약초가 있고 없고에 따른 약재의 품질은 어떤가요?\nprint( \u0026quot;Herb quality (Excellent = 0, Good = 1, Marginal = 2, Poor = 3): \u0026quot;) herb_qualities.report() print()  Herb quality (Excellent = 0, Good = 1, Marginal = 2, Poor = 3): 7000 potion quality samples were taken by discrete uniform distribution The mean was 1.197857142857143  약초 품질에 따른 약물의 효과는 어떻게 분포되나요?\nprint( \u0026quot;Potion effects by the 4 quality categories: \u0026quot;) for quality in [ Excellent, Good, Marginal, Poor ]: effect_distributions_by_quality[ quality ].report() print()  Potion effects by the 4 quality categories: 2814 excellent effect samples were taken by normal distribution The mean was 89.90235117145805 1379 good effect samples were taken by normal distribution The mean was 79.81417545995487 1415 marginal effect samples were taken by normal distribution The mean was 49.968438883249995 1392 poor effect samples were taken by normal distribution The mean was 29.315780545260804  마찬가지로 히스토그램 막대그래프를 찍어 봅니다.\nimport matplotlib.pyplot as plot plot.hist( neffects, rwidth=0.9 ) plot.xlabel(\u0026quot;Potion effect\u0026quot;) plot.ylabel(\u0026quot;# Samples\u0026quot;) plot.grid() plot.show()       이 다음 단계인 시계열 데이터 시뮬레이션 곧 Quasi-Continous Simulation 문제에서 다루기로 합니다. 1기 자바 웹 서비스 개발자 과정에는 공식 교과로 포함되지 않습니다. 실무 개발자 과정에 앞선 기초 이수 과목 포함되어야 하는 내용이기 때문입니다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 확률 분포를 이해하고 그에 따라 마구잡이 수를 진짜 마구잡이에 가깝게 뽑아내는 일은 시뮬레이션 나아가서 인공지능 기술의 바탕입니다. 여기서는 더 깊이 다루지 못하지만 따로 반드시 잘 쓸 수 있도록 익혀 두어야 합니다. [같은 예제를 Ruby 언어로 구현한 코드에서 확률 분포를 구현한 코드][kizoo22]를 볼 수 있습니다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Wolfgang Kreutzer, \u0026ldquo;System Simulation Programming Styles and Languages,\u0026rdquo; 1986, pp. 17-29\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"c5de02de84f97b6f5006a7016071af95","permalink":"https://nhnacademy.github.io/courses/monte-carlo/monte_carlo/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/monte-carlo/monte_carlo/","section":"courses","summary":"몬테카를로 방법은 여러 분야에서 시뮬레이션을 하는데 널리 쓰입니다. 일단 끝없는 순열은 쓰지 않고 계산 절차만 간추려 봅니다.\n참 거짓을 답하는 함수(실험)를 n 번 시행하고 참이 나온 횟수를 n으로 나눕니다.\n","tags":null,"title":"몬테카를로 시뮬레이션","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b23911839952a7a861b5033235eaf904","permalink":"https://nhnacademy.github.io/widgets-for-home/experience/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/experience/","section":"widgets-for-home","summary":"","tags":null,"title":"Experience","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"이 문제지를 만드는 데는 수많은 자료를 참고했습니다만, 그 모두를 기록하는 것은 쓸모가 없어서 그 가운데 주요한 자료 세 개만 골라 소개합니다.1 2 Ruby 언어로 만든 것은 교육 자료로 사용하기 위해서 다시 수정하는 경우가 많아서 때맞춰 공개가 되지 않을 수도 있습니다.3\n  Wolfgang Kreutzer, \u0026ldquo;System Simulation Programming Styles and Languages,\u0026rdquo; 1986\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Harold Abelson, Gerald Jay Sussman, Julie Sussman, \u0026ldquo;Structure and Interpretation of Computer Programs\u0026rdquo;,https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html, 1996\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 김재우, https://github.com/kizoo69/programming/tree/main/ruby/simulation, 2022\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609459200,"objectID":"bb1a28b219bae3b4d7777129fe06546c","permalink":"https://nhnacademy.github.io/courses/monte-carlo/references/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/courses/monte-carlo/references/","section":"courses","summary":"","tags":null,"title":"참고 자료","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"bf13937274d3f5c85c1242300e3f6ae7","permalink":"https://nhnacademy.github.io/widgets-for-home/accomplishments/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/accomplishments/","section":"widgets-for-home","summary":"","tags":null,"title":"Accomplish\u0026shy;ments","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"dd793e5c117ef69627368426201e40bb","permalink":"https://nhnacademy.github.io/widgets-for-home/projects/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/projects/","section":"widgets-for-home","summary":"","tags":null,"title":"Projects","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"          ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"ce296fe7c580367a65a94290c5b565a1","permalink":"https://nhnacademy.github.io/widgets-for-home/gallery/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/gallery/","section":"widgets-for-home","summary":"          ","tags":null,"title":"Gallery","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"ca5bde1e83fb890fe34dff2e089de3d2","permalink":"https://nhnacademy.github.io/widgets-for-home/people/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/people/","section":"widgets-for-home","summary":"","tags":null,"title":"아카데미 사람들","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"9d6bd363f68b8fe4aec1e54e83cdb3db","permalink":"https://nhnacademy.github.io/widgets-for-home/talks/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/talks/","section":"widgets-for-home","summary":"","tags":null,"title":"Recent \u0026 Upcoming Talks","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1cec4a0291dff1b6c737ea6421207a42","permalink":"https://nhnacademy.github.io/widgets-for-home/featured/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/featured/","section":"widgets-for-home","summary":"","tags":null,"title":"Featured Publications","type":"widgets-for-home"},{"authors":null,"categories":null,"content":" Quickly discover relevant content by filtering publications.   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3818690a0ac69a980fc63b9c22968d35","permalink":"https://nhnacademy.github.io/widgets-for-home/publications/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/publications/","section":"widgets-for-home","summary":" Quickly discover relevant content by filtering publications.   ","tags":null,"title":"Recent Publications","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3801d6e3817ba3c3573639c44f6ac5dc","permalink":"https://nhnacademy.github.io/widgets-for-home/tags/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/tags/","section":"widgets-for-home","summary":"","tags":null,"title":"Popular Topics","type":"widgets-for-home"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"85e3a091cdbf8dfef74928138a340442","permalink":"https://nhnacademy.github.io/widgets-for-home/contact/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/widgets-for-home/contact/","section":"widgets-for-home","summary":"","tags":null,"title":"Contact","type":"widgets-for-home"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://nhnacademy.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":null,"categories":null,"content":"Table of Contents  준비 계산 절차를 간추리는 방법 끝없는 계산  스트림 대안을 찾아서   몬테카를로 시뮬레이션  어림 값 끝없는 실험 응용   참고 자료    준비 아카데미 경남 캠퍼스 1기 웹 서비스 과정 수강생의 학기 시작 전 방학 숙제로 내는 문제입니다. 특별히 기술 면접과 코딩 테스트에 나왔던 문제의 답도 엿볼 수 있도록 꾸민 특별판입니다. 프로그램 짜는 재미와 데이터 읽는 기쁨을 누리는 시간이 되기를 바랍니다.\nQuiz #1:\n 이름: 과정: 날짜:  Quiz #2: 글을 읽고 프로그램이 잘 돌아가도록 코드 속의 \u0026hellip;을 채우세요.\n계산 절차를 간추리는 방법1 프로그램을 잘 짜려면 얼개가 튼튼해야 합니다. 아래는 프로그램 짜는 법을 처음 배우기 시작할 때 누구나 흔히 풀어보는 문제입니다.2 하지만 프로그램 짜는 기본기 곧 컴퓨터로 계산하는 절차를 간추리는 연습을 꾸준히 하는데 이보다 알맞은 문제도 드뭅니다. 제대로 간추리는 방법을 알면 단순한 코드의 품질도 몰라보게 달라집니다.\n프로그램 짜는 기본기를 잘 갖추고 있는지 점검하기 위해서 아래 세 함수의 같고 다른 점을 찾아서 계산 절차를 간추려 보기로 합니다.\n a에서 b까지 정수를 모두 더하는 함수 a에서 b까지 정수를 모두 곱하는 함수 마구잡이 수를 모두 곱하거나 더할 수 있는 함수  값을 차례대로 늘어놓은 순열(sequence) xs의 값을 이항 연산자 glue로 누적하는 함수 fold를 정의합니다. 인자 identity는 glue 연산자의 항등원(identity element)이거나 초기 값일 수 있습니다. 3\ndef fold( identity, glue, xs): result = identity for x in xs: result = glue( result, x ) return result  1번 문제의 답이 되는 함수를 sum이라고 합시다. sum과 fold의 계산 절차가 거의 같다는 것을 알아차리는 것이 중요합니다. 계산 절차를 간추려낸 fold가 있기 때문에 다른 점만 인자로 건네주면 순열 xs로부터 차례대로 열거되는 모든 수의 합을 구하는 함수 sum을 정의할 수 있습니다. sum 함수를 def 키워드로 정의하지 않고 lambda 연산자의 값으로 정의할 수 있다는 점도 눈여겨 봅시다.\nsum = lambda xs: fold( 0, lambda x, y: x + y, xs )  sum으로 1번 문제를 푸는 sum_integers를 정의합니다.\nsum_integers = lambda a, b: sum( range( a, b + 1 ) ) print( sum_integers( 1, 10 ) )  55  마찬가지로 fold를 써서 순열 xs의 모든 수를 곱하는 함수 product와 2번 문제를 푸는 product_integers을 정의합니다.\nproduct = lambda xs: fold( 1, lambda x, y: x * y, xs ) product_integers = lambda a, b: product( range( a, b + 1 ) ) print( product_integers( 1, 10 ) )  3628800  fold는 마구잡이 수열을 모두 더하거나 곱하는 3번 문제에도 그대로 쓸 수 있습니다.\nfrom random import random n = 20 print( sum( random() for _ in range( 0, n ) ) ) print( product( random() for _ in range( 0, n ) ) )  10.00683497691481 5.031436054307361e-12  fold처럼 되쓰임새가 높은 함수를 정의할 수 있는 이유는 순열 xs가 데이터를 만드는 코드(계산 절차)와 데이터를 쓰는 코드를 서로 떼어 놓았기 때문입니다. 여러 프로그래밍 언어에서 이런 얼개로 코드를 짜맞추는 방식을 두고 iterator 패턴이라고 하고 xs를 iterator (enumerator, list)라고 합니다.\n끝없는 계산 순열 곧 iterator를 써서 계산을 간추리면 얻을 수 있는 장점이 또 하나 있습니다. 데이터를 쓰는 코드에서 계산이 언제 끝나는지를 굳이 드러내지 않아도 됩니다. 데이터 열거의 시작과 끝을 모두 iterator 속에 간추릴 수 있기 때문입니다. 따라서 iterator를 쓰면 끝나는 계산과 끝없는 계산을 굳이 구분하지 않고 한 가지 계산으로 간추릴 수 있습니다.\n하지만 계산 자원에는 분명히 끝이 있는데 끝없는 계산을 표현하는 것이 가능한 일일까요?\n스트림 값 또는 데이터들이 언제 얼마나 쓰일지를 미리 알 수 없는 경우가 많습니다. 또, 이를테면 마우스로 클릭하는 좌표 값을 연이어 받아서 무언가를 하는 프로그램을 짜는 경우처럼 미리 데이터를 만들어 둔다는 게 아무런 의미가 없을 때도 있습니다. 이럴 때 데이터를 미리 만들어 저장해 두지 않고, (필요할 때 데이터를 만들어 낼 수 있도록) 계산하는 방법 그 자체만 따로 솎아낼 수 있다면 계산 자원을 선점하는 낭비를 줄이고 계산 방법 또는 문제를 푸는 방법을 적은 코드와 계산 또는 문제 풀이를 적은 코드를 분리하여 코드의 되쓰임새를 한층 더 끌어올릴 수 있습니다.\n데이터 만드는 계산을 데이터를 쓰는 코드로부터 완전히 격리하기 위해서 널리 쓰는 방법 가운데 하나는 지연 계산법(delayed evaluation)을 써서 순열을 표현하는 방법입니다. 스트림(Stream)이라고 불리기도 합니다.4\n먼저 계산을 미루는 연산이 필요합니다.\ndef delay( v ): return lambda: v  반대로 계산을 하도록 만드는 연산도 필요합니다.\ndef force( v ): return v()  새로운 스트림을 만들려면 빈 스트림을 표현하는 연산과 스트림에 새로운 원소를 덧붙이는 연산이 필요합니다. 이런 연산들을 아울러 constructor라고 합니다. xs를 delay 연산으로 감싸서 계산을 뒤로 미룹니다.\nEmptyStream = None def stream(x, y): # const_stream return ( x, delay( y ) )  스트림의 부품을 머리와 꼬리로 구분 짓는 연산자도 필요합니다. 이런 연산들을 아울러 selector라고 합니다. 꼬리를 떼어낼 때 계산이 일어나도록 force 연산을 씁니다.\ndef head( stream ): (x, _) = stream return x def tail( stream ): (_, xs) = stream return force( xs )  스트림 연산으로 a에서 b에 이르는 정수의 순열을 표현합니다.\ndef integers( a, b ): if a \u0026gt; b: return EmptyStream return stream( a, integers( a + 1, b ) )  스트림 원소마다 함수 f를 적용하는 절차를 간추려 foreach로 정의합니다.\ndef foreach( f, stream ): if stream == EmptyStream: return None else: f( head( stream ) ) return foreach( f, tail( stream ) )  스트림 원소를 보는데 print()를 쓰지는 못합니다. 스트림 원소를 차례대로 찍은 절차를 적는데 foreach를 써 봅니다.\ndef print_stream( stream ): foreach( lambda x: print( x, end=' ' ), stream ) print() print_stream( integers( 1, 10 ) )  1 2 3 4 5 6 7 8 9 10  끝나는 정수열은 잘 찍힙니만, 끝없는 정수열을 늘어놓는 데 스트림 연산을 쓸 수 있을까요?\ndef integers_from( n ): return stream( n, integers_from( n + 1 ) ) print_stream( integers_from( 1 ) )  스택이 넘쳤다고 투덜대면서 프로그램이 멈춥니다.\nRecursionError Traceback (most recent call last) ... [... skipping similar frames: integers_from at line 2 (2970 times)] RecursionError: maximum recursion depth exceeded  계산 방법에는 잘못이 없습니다. 하지만 계산 결과는 틀렸습니다.5\nPython 같은 언어에서는 이런 아이디어를 그대로 가져다 쓸 수 없습니다. Java, Python 같은 언어에서는 list, array 같이 끝나는 순열(sequence)을 끝없는 순열과 구분하지 않고 하나로 간추려 낼 수 없습니다. 그 때문에 빚어지는 프로그램 설계 문제를 줄이고자 표현력의 결핍을 막는 방편으로 iterator라는 패턴 또는 비슷한 이름의 부품들을 씁니다.6\n대안을 찾아서 언어마다 표현법이 다르지만 iterator로 끝없는 데이터 목록을 표현할 수 있습니다.\n정수 n부터 끝없이 정수를 열거하는 방법을 표현합니다.\ndef integers_from( n ): while True: yield( n ) n += 1  범위를 지정하여 열거하는 연산은 이미 있습니다.\nprint( range(1, 11) )  range(1, 11)  이로부터 iterator를 얻어내는 연산도 있습니다.\nprint( iter(range(1, 11)))  \u0026lt;range_iterator object at 0x7fb888fd5a80\u0026gt;  연산 결과를 찍어봐야 정수열을 볼 수는 없습니다. 두 연산 모두 계산을 하지 않기 때문입니다. 끝없는 계산의 순열을 표현하지만 때로는 계산을 하도록 만들어서 그 값을 찍는 연산도 필요합니다.\ndef print_iterator( xs ): for x in xs: print(x, end=' ') print() print_iterator( iter(range(1, 11)))  1 2 3 4 5 6 7 8 9 10  하지만 끝없는 연산을 찍으려하면 그 또한 끝나지 않습니다. 끝없는 계산을 n번 계산으로 끝내는 연산이 필요합니다.\ndef finite( n, xs ): for i in range(1, n+1): yield( next(xs) ) print_iterator( finite( 100, integers_from( 1 ) ) )  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100  finite는 여전히 계산을 미룹니다. 계산이 일어나도록 만드는 간편 함수가 있으면 편리합니다.\n계산 결과를 목록(list)에 저장하면서 비로소 계산을 하게됩니다.\ndef take( n, xs ): return list( finite( n, xs ) )  피보나치 수 10개를 곧바로 찍을 수 있습니다.\ndef fibonacci_numbers(): a, b = 0, 1 while True: yield( a ) a, b = b, a + b print( take( 10, fibonacci_numbers() ) )  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]  끝없는 짝수열에서 10개만 찍는 코드를 씁니다. 그 과정에서 되쓰임새가 또렷한 계산 절차를 함수 세 개로 나누어 간추렸습니다.\ndef filter( istrue, xs ): for x in xs: if istrue( x ): yield( x ) def isdivisible( x, y ): return x % y == 0 def iseven( x ): return isdivisible( x, 2 ) print_iterator( take( 10, filter( iseven, integers_from( 1 ) ) ) )  2 4 6 8 10 12 14 16 18 20  n번째 계산 결과만 출력하는 연산이 있으면 쓸모가 많습니다. 이를 테면 fold, sum을 iterator 패턴에 맞게 다시 정의하고 10까지 더한 값을 구한다고 하면 계산 과정에서 얻은 값을 저장할 필요가 없습니다.\ndef index( n, xs ): for x in xs: if n == 0: return x n -= 1 def fold( glue, identity, xs ): result = identity for x in xs: yield( result ) result = glue( result, x ) def sum( xs ): return fold( lambda x, y: x + y, 0, xs ) print( index( 10, sum( integers_from( 1 ) ) ) )  55  끝없는 계산은 끝없이 찍힙니다.\ndef map( f, xs ): for x in xs: yield( f( x ) ) # 1 2 ... infinite! print_iterator( map( lambda x: x + 1, integers_from(0)))  그런데 이런 연산을 어디다 쓸 수 있을까요?\n몬테카를로 시뮬레이션 몬테카를로 방법은 여러 분야에서 시뮬레이션을 하는데 널리 쓰입니다. 일단 끝없는 순열은 쓰지 않고 계산 절차만 간추려 봅니다.\n참 거짓을 답하는 함수(실험)를 n 번 시행하고 참이 나온 횟수를 n으로 나눕니다.\ndef monte_carlo( n_trials, truths ): return sum( [ truths() for i in range( n_trials+1 ) ] ) / n_trials  어림 값 몬테카를로 방식으로 ${\\pi}$ 값을 어림잡을 수 있습니다. 두 마구잡이 수가 서로 소인지 알아보는 함수를 만듭니다.\nfrom math import gcd, sqrt from random import randint def dirichlet_test(): return gcd( randint(1, 1000), randint(1, 1000) ) == 1  몬테카를로 방식으로 값을 구합니다.\ndef quess_pi( n_trials ): return sqrt( 6 / monte_carlo( n_trials, dirichlet_test ) ) print( quess_pi( 100_000 ))  3.139623287689948  십만 번 정도 시행하면 ${\\pi}$ 값에 다가갑니다.\n끝없는 실험 몬테카를로 실험에 iterator 기법을 적용해 봅니다.\n먼저 어떤 함수의 계산 값을 끝없이 늘어놓은 함수를 만듭니다.\ndef repeat( f ): while True: yield( f() )  from numpy.random import randint, random, normal print_iterator( take( 10, repeat( random ) ) )  0.9280550225904395 0.22280097961036138 0.10318922203641656 0.5838716457253749 0.03550028920191295 0.36444575313103367 0.3816809748705672 0.326481870159794 0.4301836750394781 0.24527212163771261  몬테카를로 iterator를 정의합니다. 오로지 계산 방법 그 자체만을 있는 그대로 표현한 코드를 쓸 수 있습니다. 계산 시간(횟수)와 계산 공간 문제 곧 계산 자원 문제를 계산 방법으로부터 격리할 수 있습니다.\ndef monte_carlo( experiment ): n, sums = 0, sum( repeat( experiment ) ) for s in sums: n = n + 1 yield( s / n )  $\\pi$ 값으로 끝없이 수렴하는 수열을 표현할 수 있습니다.\nfrom math import gcd, sqrt pi = map( lambda x: 0 if x == 0 else sqrt( 6 / x ), monte_carlo( dirichlet_test ) )  끝없는 수열 pi에서 10만 번째 값만 뽑습니다.\nprint( index( 100_000, pi) )  3.1405936558730163  응용 Iterator 패턴과 몬테카를로 방법을 실제 어떻게 쓰는지 그 장단점을 또렷이 드러내는 본보기로 약재와 약물의 관계를 모의 실험하는 예제를 다룹니다. 특히 끝없는 이어지는 데이터를 순열(스트림)로 간추리는 기법은 시계열 데이터 시뮬레이션을 다루는 데 잘 들어맞습니다. 특히 이동 통신 환경에서 통신망 저편에서 흘러 들어오는 수백 개의 센서 데이터 스트림을 떠올려 보면 어렵지 않게 끝없는 데이터 순열을 떠올릴 수 있습니다.7\n확률 분포 시뮬레이션에서는 가짜(의사) 마구잡이 수(난수)를 정해진 분포에 따라 늘어 놓은 일이 필요합니다. repeat 함수로 널리 쓰이는 이항, 균등, 정상 분포 함수를 준비합니다.8\ndef binomial_distribution( success_ratio ): if success_ratio \u0026lt; 0 or success_ratio \u0026gt; 1: raise ValueError( \u0026quot;binomial_distribution: \u0026quot; + \u0026quot;success ratio is out of range ( 0 to 1 only )\u0026quot; ) return repeat( lambda : random() \u0026lt;= success_ratio ) # binomial_distribution( 1.2 ) # error! # print_iterator( take( 10, binomial_distribution( 0.5 ) ) ) def discrete_uniform_distribution( low, high ): return repeat( lambda: randint( low, high + 1 ) ) # print_iterator( take( 10, discrete_uniform_distribution( 1, 4 ) ) ) def normal_distribution( mean, standard_deviation ): return repeat( lambda: normal( mean, standard_deviation))  약효 시뮬레이션 확률 분포와 몬테카를로 방법으로 재밌는 실험을 할 수 있습니다. 돌림병을 치료하는데 꼭 필요한 약초가 있다고 합시다.9\n좋은 약초를 발견할 확률이 herb_ratio일 때 마구잡이 수를 뽑아 이 값과 크기를 비교하면 참 거짓을 정할 수 있습니다. 이를 연속 시행하면 참 거짓의 이항 분포를 얻을 수 있습니다. 좋은 약초 발견 가능성을 이항 분포로 뽑아냅니다.\nherb_ratio = 0.2 herb_availablities = binomial_distribution(herb_ratio)  약초의 품질을 넷으로 나눕니다.\nExcellent, Good, Marginal, Poor = 0, 1, 2, 3  좋은 약초는 Excellent 품질. 좋은 약초가 없으면 다른 약초를 여럿 섞어서 대신 쓰는데 그 품질이 고르지 않습니다. 좋은 약초가 있느냐 없느냐에 따른 약초의 효과를 어림잡는 함수를 만듭니다.\ndef guess_quality( qualities ): return lambda isavailable: Excellent if isavailable else next( qualities )  guess_quality가 함수를 값으로 내놓고 있다는 걸 눈여겨 보아야 합니다. 이런 표현을 쓰면 간결한 코드를 쓸 수 있습니다. 하지만 코드를 읽기 어렵게 만들 수 있습니다.\n네 가지 품질 가운데 하나가 고르게 뽑히도록 이산 균등 분포를 씁니다.\nherb_qualities = map( guess_quality( discrete_uniform_distribution( Excellent, Poor ) ), herb_availablities )  약초 품질에 따라 약물의 효과가 갈리지만 약초 품질이 고르지 않으므로 약물의 효과도 편차가 있는 것이 자연스럽습니다. 실감나는 시뮬레이션을 위해서 약물 효과를 네 가지로 분류하되 그 또한 마구잡이로 약효에 편차가 생기도록 네 가지 정상 분포로 표현합니다.\neffect_distributions_by_quality = [ normal_distribution( mean, standard_deviation ) for ( mean, standard_deviation ) in [ ( 90, 10 ), ( 80, 20 ), ( 50, 30 ), ( 30, 40 ) ]]  약초의 품질에 따른 약물 효과를 마구잡이로 뽑는 함수를 만듭니다. 약물 효과는 0에서 100사이 값이므로 이 범위를 넘는 값을 잘라냅니다.\ndef quess_effect_from( quality ): guess = next( effect_distributions_by_quality [ quality ] ) if guess \u0026lt; 0: return 0 elif guess \u0026gt; 100: return 100 return guess  약초의 품질로부터 약효를 끝없이 계산하는 순열 effects를 정의합니다.\neffects = map( quess_effect_from, herb_qualities )  계산 계산이 시작되려면 시행 횟수를 정해서 약물 효과 추정치를 뽑아내고 계산 결과를 목록에 저장해야 합니다. 계산하는 방법만 적었지 실제 계산을 하지는 않았기 때문에 계산 방식을 저장해둔 계산 환경 자원을 빼면 계산하는 과정에서 필요한 계산 자원이 조금도 소비되지 않았다는 사실을 정확히 인식하고 이해하는 것이 중요합니다. 계산하는 방법과 계산을 나누면 어떤 방식으로 프로그램을 설계할 수 있는지가 잘 드러나 있습니다.\ntake로 7000번 계산을 합니다. 끝없는 계산 순열 effect가 7000번으로 끝나도록 만든 뒤에 계산 결과를 순서대로 하나씩 목록에 저장합니다. 계산 순열 effects에는 다른 계산 순열 herb_qualities가 연결되어 있고 이는 다시 herb_avaliablities로 연결되어 있기 때문에 한 계산이 다른 계산으로 이어집니다.\nnumber_of_trials = 7000 neffects = take( number_of_trials, effects )  약물 효과 시뮬레이션한 결과를 막대 그래프로 표현할 수 있습니다.\nimport matplotlib.pyplot as plot plot.hist( neffects, rwidth=0.9 ) plot.xlabel(\u0026quot;Potion effect\u0026quot;) plot.ylabel(\u0026quot;# Samples\u0026quot;) plot.grid() plot.show()     상태가 필요해 약효 모의 실험은 잘 되지만 실험은 결과 만큼 과정에 대한 정보도 중요합니다. 계산 과정에 쓴 데이터들 곧 약초와 품질, 그에 따른 약물의 품질, 그리고 약효에 대한 데이터가 될 수 있는 한 상세하게 보고서로 나와야 쓸모있는 실험이 됩니다. Iterator를 쓰는 코드 얼개를 조금도 망가뜨리지 않고 필요한 정보만 저장했다가 꺼내보는 방법이 필요합니다.\n계산과 저장을 가능한 하지 않고 미루는 방식과 계산 과정에서 얻은 정보를 적절히 저장하는 두 가지 다른 방식을 한 데 엮어 쓰는 본보기가 됩니다. 문제는 그에 맞는 풀이 방법이 제 각기 다를 수 있습니다. 굳이 한 가지 방법만을 고집할 필요가 없습니다.\n몬테카를로 클래스 Iterator로 동작하는 모듈을 만들 수 있습니다. iter, next 메소드를 구현하면 됩니다. 모듈을 만드는 __init__에서 모의 실험과 분포의 이름을 받습니다. 이렇게 만들면 인자로 받은 순열 experiments와 다를 바 없이 iterator처럼 값을 끝없이 늘어놓으면서도, __next__할 때마다 계산 과정에서 얻은 데이터 곧 횟수와 합을 저장하기 때문에 필요할 때 꺼내 쓸 수 있습니다.\nclass MonteCarlo: def __init__( self, experiments, name_of_experiment = \u0026quot;\u0026quot;, name_of_distribution = \u0026quot;\u0026quot; ): self.name_of_experiment = name_of_experiment self.experiments = experiments self.name_of_distribution = name_of_distribution self.number_of_trials = 0 self.sum = 0 def __iter__( self ): self.number_of_trials = 0 return self def __next__(self): outcome = next( self.experiments ) self.sum += outcome self.number_of_trials += 1; return outcome def mean( self ): if self.number_of_trials == 0: raise BaseException(\u0026quot;0 trials\u0026quot;) else: return self.sum / self.number_of_trials def report( self ): print( self.number_of_trials, self.name_of_experiment, \u0026quot;samples were taken by\u0026quot;, self.name_of_distribution ) print( \u0026quot;The mean was\u0026quot;, self.mean() )  함수로 만든 monte_carlo와 쓰임새가 같다는 것을 보이기 위해서 MonteCarlo 클래스로 $\\pi$ 값을 어림잡아 봅니다.\ndirichlet_test_experiments = MonteCarlo( repeat( dirichlet_test ), \u0026quot;dirichlet_test\u0026quot; ) take( 100_1000, dirichlet_test_experiments ) print( sqrt( 6 / dirichlet_test_experiments.mean() ) )  3.1411359422489764  변해도 되는 것과 변하지 않는 것 코드 구조가 조금도 바뀌지 않았습니다. MonteCarlo 클래스로 모듈을 만들어 필요할 때마다 iterator에 덧 씌우는 코드 말고는 달라진 부분이 거의 없습니다. 하지만 이 번에는 단계별 정보를 저장할 준비가 되어 있습니다.\nherb_ratio = 0.2 herb_availablities = MonteCarlo(binomial_distribution(herb_ratio), \u0026quot;herb availabilties\u0026quot;, \u0026quot;binomial distribution\u0026quot;) Excellent, Good, Marginal, Poor = 0, 1, 2, 3 def guess_quality( qualities ): return lambda isavailable: Excellent if isavailable else next( qualities ) herb_qualities = MonteCarlo( map( guess_quality( discrete_uniform_distribution( Excellent, Poor ) ), herb_availablities ), \u0026quot;potion quality\u0026quot;, \u0026quot;discrete uniform distribution\u0026quot; ) effect_distributions_by_quality = [ MonteCarlo( normal_distribution( mean, standard_deviation ), quality + \u0026quot; effect\u0026quot;, \u0026quot;normal distribution\u0026quot;) for ( quality, mean, standard_deviation ) in [ ( \u0026quot;excellent\u0026quot;, 90, 10 ), ( \u0026quot;good\u0026quot;, 80, 20 ), ( \u0026quot;marginal\u0026quot;, 50, 30 ), ( \u0026quot;poor\u0026quot;, 30, 40 ) ]] def quess_effect_from( quality ): guess = next( effect_distributions_by_quality [ quality ] ) if guess \u0026lt; 0: return 0 elif guess \u0026gt; 100: return 100 return guess effects = map( quess_effect_from, herb_qualities ) number_of_trials = 7000 neffects = take( number_of_trials, effects )  모의 실험 보고서 모든 계산이 마무리되었으므로 계산 결과를 볼 수 있습니다. MonteCarlo 클래스가 없다면 계산 순열을 끝없이 늘어놓는 일과 계산 과정을 기록하는 일, 이 둘을 한 꾸러미로 묶어내기가 (언제나 그렇듯이 한 방법으로 다른 방법을 완전히 대체하는 할 수 있지만) 무척 번거롭습니다. 문제마다 알맞은 방법을 골라서 서로 잘 어울리도록 짜 맞추면 프로그램의 얼개가 아주 튼튼해집니다. 성능을 시험하고 고장난 곳을 찾아서 고치기에도 좋은 짜임새를 갖추게 됩니다.\n좋은 약초를 얻을 확률은 얼마나 될까요?\nprint( \u0026quot;Herb availability: \u0026quot;) herb_availablities.report() print()  Herb availability: 7000 herb availabilties samples were taken by binomial distribution The mean was 0.2012857142857143  좋은 약초가 있고 없고에 따른 약재의 품질은 어떤가요?\nprint( \u0026quot;Herb quality (Excellent = 0, Good = 1, Marginal = 2, Poor = 3): \u0026quot;) herb_qualities.report() print()  Herb quality (Excellent = 0, Good = 1, Marginal = 2, Poor = 3): 7000 potion quality samples were taken by discrete uniform distribution The mean was 1.197857142857143  약초 품질에 따른 약물의 효과는 어떻게 분포되나요?\nprint( \u0026quot;Potion effects by the 4 quality categories: \u0026quot;) for quality in [ Excellent, Good, Marginal, Poor ]: effect_distributions_by_quality[ quality ].report() print()  Potion effects by the 4 quality categories: 2814 excellent effect samples were taken by normal distribution The mean was 89.90235117145805 1379 good effect samples were taken by normal distribution The mean was 79.81417545995487 1415 marginal effect samples were taken by normal distribution The mean was 49.968438883249995 1392 poor effect samples were taken by normal distribution The mean was 29.315780545260804  마찬가지로 히스토그램 막대그래프를 찍어 봅니다.\nimport matplotlib.pyplot as plot plot.hist( neffects, rwidth=0.9 ) plot.xlabel(\u0026quot;Potion effect\u0026quot;) plot.ylabel(\u0026quot;# Samples\u0026quot;) plot.grid() plot.show()     참고 자료 이 문제지를 만드는 데는 수많은 자료를 참고했습니다만, 그 모두를 기록하는 것은 쓸모가 없어서 그 가운데 주요한 자료 세 개만 골라 소개합니다.10 11 Ruby 언어로 만든 것은 교육 자료로 사용하기 위해서 다시 수정하는 경우가 많아서 때맞춰 공개가 되지 않을 수도 있습니다.12\n  2022년 아카데미 경남 캠퍼스 1기 기술 면접 1번 문제. 프로그램 짜는 틀이 잡혔는지 알아보려고 낸 문제다. 정답을 맞힌 사람이 없어서 한 번 더 풀어보라고 다시 문제지의 1번 문제로 내놓았다. 이 번에는 의도를 알아차리기 쉽도록 코드 틀을 마련하여 채우는 방식으로 꾸몄다. 이 문제는 문제지가 끌고 가려는 이야기 흐름에서 조금 벗어난 시작이다. 하지만 이 문제지 자체가 2022년 경남 아카데미 1기의 학기 시작 전 공부 거리로 나가는 것이라 정답지를 대신하는 것이라 봐도 좋다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Harold Abelson, Gerald Jay Sussman, Julie Sussman, \u0026ldquo;Structure and Interpretation of Computer Programs\u0026rdquo;, Chapter 2.2.1,3 (2nd ed.), https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-4.html#%_toc_%_sec_2.2.1 1996\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 항등원과 함께 이항 연산자 glue의 결합 법칙도 중요하다. 계산의 방향에 따라 결과가 다르기 때문이다. 덧셈, 곱셈 말고 뺄셈, 나눗셈이 들어가는 경우를 생각해보면 된다. 이 때문에 fold-left, fold-right로 어느 쪽으로 연산 결과를 쌓아가는지 구분지어 정의하는 편이 더 나을 수도 있다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Harold Abelson, Gerald Jay Sussman, Julie Sussman, \u0026ldquo;Structure and Interpretation of Computer Programs\u0026rdquo;, Section 3.5.1 Streams Are Delayed Lists의 아이디어를 빌렸다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 왜 그럴까요? (귀띔: Applicative-order evaluation (eager evaluation, call-by-value와 비슷한) 방식으로 계산하는 언어는 다 마찬가지입니다. 프로그래밍 언어가 대개 이런 계산 방식을 따릅니다. 이런 언어에서는 새로운 제어 구조를 만들어 보태지 못합니다. 미리 만들어 놓은 것만 쓸 수 있어요. 이를 테면 if-then-else가 없다면 새로 만들어서 쓸 수 없습니다.) 함수(또는 프로시저)의 정의하는 식을 펼쳐서 인자로 건넨 식을 대치하기 전에, 인자에 대응한 식의 계산을 먼저 끝내는 방식을 두고 흔히 인자 먼저 계산법(applicative-order evaluation, eager evaluation)이라고 합니다. Call-by-value라는 인자 전달 방법(parameter-passing)과 비슷하게 생각해도 크게 무리는 없지만 꼼꼼히 따지고 들면 차이가 있으니 이 번 참에 공부해서 잘 분별해 두는 것도 좋습니다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Iterator를 만드는 데도 여러가지 기법이 있지만 여기서는 주로 (python 언어에서 generator라고하는) yield 연산으로 함수 내에서 값을 열거하는 방법을 쓰기로 한다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 이 다음 단계인 시계열 데이터 시뮬레이션 곧 Quasi-Continous Simulation 문제에서 다루기로 합니다. 1기 자바 웹 서비스 개발자 과정에는 공식 교과로 포함되지 않습니다. 실무 개발자 과정에 앞선 기초 이수 과목 포함되어야 하는 내용이기 때문입니다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 확률 분포를 이해하고 그에 따라 마구잡이 수를 진짜 마구잡이에 가깝게 뽑아내는 일은 시뮬레이션 나아가서 인공지능 기술의 바탕입니다. 여기서는 더 깊이 다루지 못하지만 따로 반드시 잘 쓸 수 있도록 익혀 두어야 합니다. 같은 예제를 Ruby 언어로 구현한 코드에서 확률 분포를 구현한 코드를 볼 수 있습니다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Wolfgang Kreutzer, \u0026ldquo;System Simulation Programming Styles and Languages,\u0026rdquo; 1986, pp. 17-29\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Wolfgang Kreutzer, \u0026ldquo;System Simulation Programming Styles and Languages,\u0026rdquo; 1986\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Harold Abelson, Gerald Jay Sussman, Julie Sussman, \u0026ldquo;Structure and Interpretation of Computer Programs\u0026rdquo;,https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html, 1996\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 김재우, https://github.com/kizoo69/programming/tree/main/ruby/simulation, 2022\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1645056e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1645056e3,"objectID":"712331d1a7c7921f737c4ffc22429f41","permalink":"https://nhnacademy.github.io/post/monte-carlo/","publishdate":"2022-02-17T00:00:00Z","relpermalink":"/post/monte-carlo/","section":"post","summary":"System Simulation Programming Styles in Stream Paradigm","tags":null,"title":"Monte Carlo Methods","type":"post"},{"authors":["Wowchemy"],"categories":["Demo","教程"],"content":"Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It\u0026rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.  Get Started  👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Guide and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy\u0026rsquo;s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://nhnacademy.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":null,"categories":null,"content":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you\u0026rsquo;ll find some examples of the types of technical content that can be rendered with Academic.\nExamples Code Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the highlight option in your config/_default/params.toml file.\n```python import pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head() ```  renders as\nimport pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head()  Charts Academic supports the popular Plotly chart format.\nSave your Plotly JSON in your page folder, for example chart.json, and then add the {{\u0026lt; chart data=\u0026quot;chart\u0026quot; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\n  (function() { let a = setInterval( function() { if ( typeof window.Plotly === 'undefined' ) { return; } clearInterval( a ); Plotly.d3.json(\"./line-chart.json\", function(chart) { Plotly.plot('chart-198364527', chart.data, chart.layout, {responsive: true}); }); }, 500 ); })();  You might also find the Plotly JSON Editor useful.\nMath Academic supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.toml file.\nTo render inline or block math, wrap your LaTeX math with $...$ or $$...$$, respectively.\nExample math block:\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |} {\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$  renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left |\\nabla F(\\mathbf{x}{n}) - \\nabla F(\\mathbf{x}{n-1}) \\right |^2}$$\nExample inline math $\\nabla F(\\mathbf{x}_{n})$ renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the \\\\\\\\ math linebreak:\n$$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\\\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$  renders as\n$$f(k;p_{0}^{}) = \\begin{cases}p_{0}^{} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$\nDiagrams Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ```  renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2]  An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ```  renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good!  An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ```  renders as\ngantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d  An example class diagram:\n```mermaid classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } ```  renders as\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() }  An example state diagram:\n```mermaid stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] ```  renders as\nstateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*]  Todo lists You can even write your todo lists in Academic too:\n- [x] Write math example - [x] Write diagram example - [ ] Do something else  renders as\n Write math example Write diagram example Do something else  Tables Represent your data in tables:\n| First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell |  renders as\n   First Header Second Header     Content Cell Content Cell   Content Cell Content Cell    Callouts Academic supports a shortcode for callouts, also referred to as asides, hints, or alerts. By wrapping a paragraph in {{% callout note %}} ... {{% /callout %}}, it will render as an aside.\n{{% callout note %}} A Markdown aside is useful for displaying notices, hints, or definitions to your readers. {{% /callout %}}  renders as\n A Markdown aside is useful for displaying notices, hints, or definitions to your readers.   Spoilers Add a spoiler to a page to reveal text, such as an answer to a question, after a button is clicked.\n{{\u0026lt; spoiler text=\u0026quot;Click to view the spoiler\u0026quot; \u0026gt;}} You found me! {{\u0026lt; /spoiler \u0026gt;}}  renders as\nClick to view the spoiler You found me!\n Icons Academic enables you to use a wide range of icons from Font Awesome and Academicons in addition to emojis.\nHere are some examples using the icon shortcode to render icons:\n{{\u0026lt; icon name=\u0026quot;terminal\u0026quot; pack=\u0026quot;fas\u0026quot; \u0026gt;}} Terminal {{\u0026lt; icon name=\u0026quot;python\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} Python {{\u0026lt; icon name=\u0026quot;r-project\u0026quot; pack=\u0026quot;fab\u0026quot; \u0026gt;}} R  renders as\n  Terminal\n Python\n R\nDid you find this page helpful? Consider sharing it 🙌 ","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"https://nhnacademy.github.io/post/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Writing technical content in Academic","type":"post"},{"authors":["Academy"],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://nhnacademy.github.io/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":["Wowchemy"],"categories":[],"content":"from IPython.core.display import Image Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')     print(\u0026quot;Welcome to Academic!\u0026quot;)  Welcome to Academic!  Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb  The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupter notebook will contain your post metadata (front matter).\nIn Jupter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post's title date: 2019-09-01 # Put any other Academic metadata here... ---  Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.  Example This post was created with Jupyter. The orginal files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567641600,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://nhnacademy.github.io/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  **Two**  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://nhnacademy.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://nhnacademy.github.io/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://nhnacademy.github.io/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Academy","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://nhnacademy.github.io/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Academy","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://nhnacademy.github.io/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://nhnacademy.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]